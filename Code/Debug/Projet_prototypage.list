
Projet_prototypage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000814  08006770  08006770  00007770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f84  08006f84  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  08006f84  08006f84  00007f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f8c  08006f8c  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f8c  08006f8c  00007f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f90  08006f90  00007f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08006f94  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d4  20000064  08006ff8  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a38  08006ff8  00008a38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132d1  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a0a  00000000  00000000  0001b365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0001dd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5d  00000000  00000000  0001ee68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168da  00000000  00000000  0001fbc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167c8  00000000  00000000  0003649f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089ad6  00000000  00000000  0004cc67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d673d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dc0  00000000  00000000  000d6780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000db540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006758 	.word	0x08006758

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08006758 	.word	0x08006758

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2iz>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000844:	d215      	bcs.n	8000872 <__aeabi_d2iz+0x36>
 8000846:	d511      	bpl.n	800086c <__aeabi_d2iz+0x30>
 8000848:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d912      	bls.n	8000878 <__aeabi_d2iz+0x3c>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000862:	fa23 f002 	lsr.w	r0, r3, r2
 8000866:	bf18      	it	ne
 8000868:	4240      	negne	r0, r0
 800086a:	4770      	bx	lr
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	4770      	bx	lr
 8000872:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000876:	d105      	bne.n	8000884 <__aeabi_d2iz+0x48>
 8000878:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800087c:	bf08      	it	eq
 800087e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b099      	sub	sp, #100	@ 0x64
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int old_nb_electrodes_couvertes = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	65fb      	str	r3, [r7, #92]	@ 0x5c
	int old_taille_objet = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	65bb      	str	r3, [r7, #88]	@ 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089a:	f000 ff05 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089e:	f000 f877 	bl	8000990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a2:	f000 f9a9 	bl	8000bf8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80008a6:	f000 f907 	bl	8000ab8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80008aa:	f000 f975 	bl	8000b98 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008ae:	f000 f8c5 	bl	8000a3c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80008b2:	2100      	movs	r1, #0
 80008b4:	482d      	ldr	r0, [pc, #180]	@ (800096c <main+0xe0>)
 80008b6:	f003 fc5f 	bl	8004178 <HAL_TIM_IC_Start_IT>

  SSD1306_Init (); // initialize the display
 80008ba:	f000 fa7f 	bl	8000dbc <SSD1306_Init>
	  sprintf(message, "%d\n", periode);
	  HAL_UART_Transmit(&huart2, (const uint8_t*)message, sizeof(periode), HAL_MAX_DELAY);
	  */

	  // rafraichissement
	  if (nb_electrodes_couvertes != old_nb_electrodes_couvertes || taille_objet != old_taille_objet) {
 80008be:	4b2c      	ldr	r3, [pc, #176]	@ (8000970 <main+0xe4>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d104      	bne.n	80008d2 <main+0x46>
 80008c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000974 <main+0xe8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d047      	beq.n	8000962 <main+0xd6>
		  // formatage
		  char message_nb_electrodes[40];
		  sprintf(message_nb_electrodes, "Nb electrodes: %d  \n", nb_electrodes_couvertes);
 80008d2:	4b27      	ldr	r3, [pc, #156]	@ (8000970 <main+0xe4>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	463b      	mov	r3, r7
 80008d8:	4927      	ldr	r1, [pc, #156]	@ (8000978 <main+0xec>)
 80008da:	4618      	mov	r0, r3
 80008dc:	f005 fa9c 	bl	8005e18 <siprintf>

		  char message_taille_objet[] = "Taille objet:";
 80008e0:	4b26      	ldr	r3, [pc, #152]	@ (800097c <main+0xf0>)
 80008e2:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 80008e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008e8:	c407      	stmia	r4!, {r0, r1, r2}
 80008ea:	8023      	strh	r3, [r4, #0]
		  char message_taille_incertitude[30];
		  sprintf(message_taille_incertitude, "%d +- %d mm2    \n", taille_objet, incertitude_taille_objet);
 80008ec:	4b21      	ldr	r3, [pc, #132]	@ (8000974 <main+0xe8>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <main+0xf4>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80008f8:	4922      	ldr	r1, [pc, #136]	@ (8000984 <main+0xf8>)
 80008fa:	f005 fa8d 	bl	8005e18 <siprintf>
		  //char message_incertitude_taille[10];
		  //sprintf(message_incertitude_taille, "%d", incertitude_taille_objet);


		  // affichage
		  SSD1306_Clear();
 80008fe:	f000 fc80 	bl	8001202 <SSD1306_Clear>

		  SSD1306_GotoXY (1, LIGNE*0);
 8000902:	2100      	movs	r1, #0
 8000904:	2001      	movs	r0, #1
 8000906:	f000 fbc3 	bl	8001090 <SSD1306_GotoXY>
		  SSD1306_Puts (message_nb_electrodes, &Font_7x10, 1);
 800090a:	463b      	mov	r3, r7
 800090c:	2201      	movs	r2, #1
 800090e:	491e      	ldr	r1, [pc, #120]	@ (8000988 <main+0xfc>)
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fc51 	bl	80011b8 <SSD1306_Puts>
		  //HAL_UART_Transmit(&huart2, (const uint8_t*)message_nb_electrodes, sizeof(message_nb_electrodes), HAL_MAX_DELAY);


		  SSD1306_GotoXY (1, LIGNE*2);
 8000916:	2118      	movs	r1, #24
 8000918:	2001      	movs	r0, #1
 800091a:	f000 fbb9 	bl	8001090 <SSD1306_GotoXY>
		  SSD1306_Puts (message_taille_objet, &Font_7x10, 1);
 800091e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000922:	2201      	movs	r2, #1
 8000924:	4918      	ldr	r1, [pc, #96]	@ (8000988 <main+0xfc>)
 8000926:	4618      	mov	r0, r3
 8000928:	f000 fc46 	bl	80011b8 <SSD1306_Puts>

		  SSD1306_GotoXY (1,LIGNE*3);
 800092c:	2124      	movs	r1, #36	@ 0x24
 800092e:	2001      	movs	r0, #1
 8000930:	f000 fbae 	bl	8001090 <SSD1306_GotoXY>
		  SSD1306_Puts (message_taille_incertitude, &Font_7x10, 1);
 8000934:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000938:	2201      	movs	r2, #1
 800093a:	4913      	ldr	r1, [pc, #76]	@ (8000988 <main+0xfc>)
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fc3b 	bl	80011b8 <SSD1306_Puts>
		  HAL_UART_Transmit(&huart2, (const uint8_t*)message_taille_incertitude, sizeof(message_taille_incertitude), HAL_MAX_DELAY);
 8000942:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000946:	f04f 33ff 	mov.w	r3, #4294967295
 800094a:	221e      	movs	r2, #30
 800094c:	480f      	ldr	r0, [pc, #60]	@ (800098c <main+0x100>)
 800094e:	f004 fb3d 	bl	8004fcc <HAL_UART_Transmit>

		  SSD1306_UpdateScreen();
 8000952:	f000 faf7 	bl	8000f44 <SSD1306_UpdateScreen>

		  old_nb_electrodes_couvertes = nb_electrodes_couvertes;
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <main+0xe4>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		  old_taille_objet = taille_objet;
 800095c:	4b05      	ldr	r3, [pc, #20]	@ (8000974 <main+0xe8>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	65bb      	str	r3, [r7, #88]	@ 0x58
	  }

	  HAL_Delay(100);
 8000962:	2064      	movs	r0, #100	@ 0x64
 8000964:	f000 ff06 	bl	8001774 <HAL_Delay>
	  if (nb_electrodes_couvertes != old_nb_electrodes_couvertes || taille_objet != old_taille_objet) {
 8000968:	e7a9      	b.n	80008be <main+0x32>
 800096a:	bf00      	nop
 800096c:	200000d4 	.word	0x200000d4
 8000970:	200001b0 	.word	0x200001b0
 8000974:	200001b4 	.word	0x200001b4
 8000978:	08006770 	.word	0x08006770
 800097c:	0800679c 	.word	0x0800679c
 8000980:	200001b8 	.word	0x200001b8
 8000984:	08006788 	.word	0x08006788
 8000988:	20000000 	.word	0x20000000
 800098c:	20000120 	.word	0x20000120

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b09c      	sub	sp, #112	@ 0x70
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800099a:	2228      	movs	r2, #40	@ 0x28
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f005 fa5a 	bl	8005e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2230      	movs	r2, #48	@ 0x30
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f005 fa4c 	bl	8005e58 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c0:	2302      	movs	r3, #2
 80009c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c4:	2301      	movs	r3, #1
 80009c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c8:	2310      	movs	r3, #16
 80009ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009cc:	2302      	movs	r3, #2
 80009ce:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009d0:	2300      	movs	r3, #0
 80009d2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80009d4:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 80009d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009da:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 ff1a 	bl	8002818 <HAL_RCC_OscConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80009ea:	f000 f9e1 	bl	8000db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ee:	230f      	movs	r3, #15
 80009f0:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f2:	2302      	movs	r3, #2
 80009f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a02:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a06:	2101      	movs	r1, #1
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 ff43 	bl	8003894 <HAL_RCC_ClockConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000a14:	f000 f9cc 	bl	8000db0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a18:	2320      	movs	r3, #32
 8000a1a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	4618      	mov	r0, r3
 8000a24:	f003 f96c 	bl	8003d00 <HAL_RCCEx_PeriphCLKConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a2e:	f000 f9bf 	bl	8000db0 <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3770      	adds	r7, #112	@ 0x70
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab4 <MX_I2C1_Init+0x78>)
 8000a44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a48:	f240 220b 	movw	r2, #523	@ 0x20b
 8000a4c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a54:	4b16      	ldr	r3, [pc, #88]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a5a:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a60:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a66:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a78:	480d      	ldr	r0, [pc, #52]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a7a:	f001 f999 	bl	8001db0 <HAL_I2C_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a84:	f000 f994 	bl	8000db0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4809      	ldr	r0, [pc, #36]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a8c:	f001 fe2c 	bl	80026e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a96:	f000 f98b 	bl	8000db0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4804      	ldr	r0, [pc, #16]	@ (8000ab0 <MX_I2C1_Init+0x74>)
 8000a9e:	f001 fe6e 	bl	800277e <HAL_I2CEx_ConfigDigitalFilter>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000aa8:	f000 f982 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000080 	.word	0x20000080
 8000ab4:	40005400 	.word	0x40005400

08000ab8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08c      	sub	sp, #48	@ 0x30
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000abe:	f107 0320 	add.w	r3, r7, #32
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b94 <MX_TIM2_Init+0xdc>)
 8000ae6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000aec:	4b29      	ldr	r3, [pc, #164]	@ (8000b94 <MX_TIM2_Init+0xdc>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af2:	4b28      	ldr	r3, [pc, #160]	@ (8000b94 <MX_TIM2_Init+0xdc>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000af8:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <MX_TIM2_Init+0xdc>)
 8000afa:	f04f 32ff 	mov.w	r2, #4294967295
 8000afe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b00:	4b24      	ldr	r3, [pc, #144]	@ (8000b94 <MX_TIM2_Init+0xdc>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b06:	4b23      	ldr	r3, [pc, #140]	@ (8000b94 <MX_TIM2_Init+0xdc>)
 8000b08:	2280      	movs	r2, #128	@ 0x80
 8000b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b0c:	4821      	ldr	r0, [pc, #132]	@ (8000b94 <MX_TIM2_Init+0xdc>)
 8000b0e:	f003 fa7b 	bl	8004008 <HAL_TIM_Base_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000b18:	f000 f94a 	bl	8000db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b20:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b22:	f107 0320 	add.w	r3, r7, #32
 8000b26:	4619      	mov	r1, r3
 8000b28:	481a      	ldr	r0, [pc, #104]	@ (8000b94 <MX_TIM2_Init+0xdc>)
 8000b2a:	f003 fe0e 	bl	800474a <HAL_TIM_ConfigClockSource>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000b34:	f000 f93c 	bl	8000db0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000b38:	4816      	ldr	r0, [pc, #88]	@ (8000b94 <MX_TIM2_Init+0xdc>)
 8000b3a:	f003 fabc 	bl	80040b6 <HAL_TIM_IC_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000b44:	f000 f934 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	480f      	ldr	r0, [pc, #60]	@ (8000b94 <MX_TIM2_Init+0xdc>)
 8000b58:	f004 f966 	bl	8004e28 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000b62:	f000 f925 	bl	8000db0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <MX_TIM2_Init+0xdc>)
 8000b7e:	f003 fd48 	bl	8004612 <HAL_TIM_IC_ConfigChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000b88:	f000 f912 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	3730      	adds	r7, #48	@ 0x30
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200000d4 	.word	0x200000d4

08000b98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000b9e:	4a15      	ldr	r2, [pc, #84]	@ (8000bf4 <MX_USART2_UART_Init+0x5c>)
 8000ba0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000ba4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ba8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	@ (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bdc:	f004 f9a8 	bl	8004f30 <HAL_UART_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000be6:	f000 f8e3 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000120 	.word	0x20000120
 8000bf4:	40004400 	.word	0x40004400

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <MX_GPIO_Init+0x44>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	4a0e      	ldr	r2, [pc, #56]	@ (8000c3c <MX_GPIO_Init+0x44>)
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c08:	6153      	str	r3, [r2, #20]
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <MX_GPIO_Init+0x44>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <MX_GPIO_Init+0x44>)
 8000c18:	695b      	ldr	r3, [r3, #20]
 8000c1a:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <MX_GPIO_Init+0x44>)
 8000c1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c20:	6153      	str	r3, [r2, #20]
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <MX_GPIO_Init+0x44>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000

08000c40 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	if (htim == &htim2){
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a4d      	ldr	r2, [pc, #308]	@ (8000d80 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	f040 8089 	bne.w	8000d64 <HAL_TIM_IC_CaptureCallback+0x124>

		if (i_mesure < NB_MESURES_MOYENNE) {
 8000c52:	4b4c      	ldr	r3, [pc, #304]	@ (8000d84 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2bc7      	cmp	r3, #199	@ 0xc7
 8000c58:	dc1b      	bgt.n	8000c92 <HAL_TIM_IC_CaptureCallback+0x52>
			mesures[i_mesure] = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1) - t_start;
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4848      	ldr	r0, [pc, #288]	@ (8000d80 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000c5e:	f003 fe3d 	bl	80048dc <HAL_TIM_ReadCapturedValue>
 8000c62:	4603      	mov	r3, r0
 8000c64:	4a48      	ldr	r2, [pc, #288]	@ (8000d88 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000c66:	6812      	ldr	r2, [r2, #0]
 8000c68:	1a9a      	subs	r2, r3, r2
 8000c6a:	4b46      	ldr	r3, [pc, #280]	@ (8000d84 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4a46      	ldr	r2, [pc, #280]	@ (8000d8c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000c72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			t_start = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8000c76:	2100      	movs	r1, #0
 8000c78:	4841      	ldr	r0, [pc, #260]	@ (8000d80 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000c7a:	f003 fe2f 	bl	80048dc <HAL_TIM_ReadCapturedValue>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b41      	ldr	r3, [pc, #260]	@ (8000d88 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000c84:	601a      	str	r2, [r3, #0]
			i_mesure++;
 8000c86:	4b3f      	ldr	r3, [pc, #252]	@ (8000d84 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	4a3d      	ldr	r2, [pc, #244]	@ (8000d84 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000c8e:	6013      	str	r3, [r2, #0]
			taille_objet = N_TO_T(nb_electrodes_couvertes);
			incertitude_taille_objet = INCERTITUDE(nb_electrodes_couvertes);
		}

	}
}
 8000c90:	e068      	b.n	8000d64 <HAL_TIM_IC_CaptureCallback+0x124>
			i_mesure = 0;
 8000c92:	4b3c      	ldr	r3, [pc, #240]	@ (8000d84 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
			int somme = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
			for(int i=0; i<NB_MESURES_MOYENNE; i++) {
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	e009      	b.n	8000cb6 <HAL_TIM_IC_CaptureCallback+0x76>
				somme += mesures[i];
 8000ca2:	4a3a      	ldr	r2, [pc, #232]	@ (8000d8c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	4413      	add	r3, r2
 8000cae:	60fb      	str	r3, [r7, #12]
			for(int i=0; i<NB_MESURES_MOYENNE; i++) {
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	2bc7      	cmp	r3, #199	@ 0xc7
 8000cba:	ddf2      	ble.n	8000ca2 <HAL_TIM_IC_CaptureCallback+0x62>
			periode = somme / NB_MESURES_MOYENNE;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4a34      	ldr	r2, [pc, #208]	@ (8000d90 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000cc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc4:	1192      	asrs	r2, r2, #6
 8000cc6:	17db      	asrs	r3, r3, #31
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	4a32      	ldr	r2, [pc, #200]	@ (8000d94 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000ccc:	6013      	str	r3, [r2, #0]
			nb_electrodes_couvertes = P_TO_N(periode);
 8000cce:	4b31      	ldr	r3, [pc, #196]	@ (8000d94 <HAL_TIM_IC_CaptureCallback+0x154>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fd48 	bl	8000768 <__aeabi_i2d>
 8000cd8:	a325      	add	r3, pc, #148	@ (adr r3, 8000d70 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cde:	f7ff fac7 	bl	8000270 <__aeabi_dmul>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	4610      	mov	r0, r2
 8000ce8:	4619      	mov	r1, r3
 8000cea:	a323      	add	r3, pc, #140	@ (adr r3, 8000d78 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf0:	f7ff fbec 	bl	80004cc <__aeabi_dsub>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f7ff fd9e 	bl	800083c <__aeabi_d2iz>
 8000d00:	4603      	mov	r3, r0
 8000d02:	4a25      	ldr	r2, [pc, #148]	@ (8000d98 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000d04:	6013      	str	r3, [r2, #0]
			taille_objet = N_TO_T(nb_electrodes_couvertes);
 8000d06:	4b24      	ldr	r3, [pc, #144]	@ (8000d98 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	009a      	lsls	r2, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	4a21      	ldr	r2, [pc, #132]	@ (8000d9c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000d16:	6013      	str	r3, [r2, #0]
			incertitude_taille_objet = INCERTITUDE(nb_electrodes_couvertes);
 8000d18:	4b1f      	ldr	r3, [pc, #124]	@ (8000d98 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fd22 	bl	8000768 <__aeabi_i2d>
 8000d24:	f04f 0200 	mov.w	r2, #0
 8000d28:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000d2a:	f7ff faa1 	bl	8000270 <__aeabi_dmul>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	460b      	mov	r3, r1
 8000d32:	4610      	mov	r0, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000d3c:	f7ff fbc8 	bl	80004d0 <__adddf3>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4610      	mov	r0, r2
 8000d46:	4619      	mov	r1, r3
 8000d48:	f04f 0200 	mov.w	r2, #0
 8000d4c:	4b16      	ldr	r3, [pc, #88]	@ (8000da8 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000d4e:	f7ff fa8f 	bl	8000270 <__aeabi_dmul>
 8000d52:	4602      	mov	r2, r0
 8000d54:	460b      	mov	r3, r1
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f7ff fd6f 	bl	800083c <__aeabi_d2iz>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	4a12      	ldr	r2, [pc, #72]	@ (8000dac <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	f3af 8000 	nop.w
 8000d70:	e3a7daa5 	.word	0xe3a7daa5
 8000d74:	3f950331 	.word	0x3f950331
 8000d78:	9ba5e354 	.word	0x9ba5e354
 8000d7c:	402e60c4 	.word	0x402e60c4
 8000d80:	200000d4 	.word	0x200000d4
 8000d84:	200004dc 	.word	0x200004dc
 8000d88:	200001a8 	.word	0x200001a8
 8000d8c:	200001bc 	.word	0x200001bc
 8000d90:	51eb851f 	.word	0x51eb851f
 8000d94:	200001ac 	.word	0x200001ac
 8000d98:	200001b0 	.word	0x200001b0
 8000d9c:	200001b4 	.word	0x200001b4
 8000da0:	40230000 	.word	0x40230000
 8000da4:	402c0000 	.word	0x402c0000
 8000da8:	40100000 	.word	0x40100000
 8000dac:	200001b8 	.word	0x200001b8

08000db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <Error_Handler+0x8>

08000dbc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000dc2:	f000 fa27 	bl	8001214 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000dc6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2178      	movs	r1, #120	@ 0x78
 8000dce:	485b      	ldr	r0, [pc, #364]	@ (8000f3c <SSD1306_Init+0x180>)
 8000dd0:	f001 f972 	bl	80020b8 <HAL_I2C_IsDeviceReady>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e0a9      	b.n	8000f32 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000dde:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000de2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000de4:	e002      	b.n	8000dec <SSD1306_Init+0x30>
		p--;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3b01      	subs	r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f9      	bne.n	8000de6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000df2:	22ae      	movs	r2, #174	@ 0xae
 8000df4:	2100      	movs	r1, #0
 8000df6:	2078      	movs	r0, #120	@ 0x78
 8000df8:	f000 fa88 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000dfc:	2220      	movs	r2, #32
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2078      	movs	r0, #120	@ 0x78
 8000e02:	f000 fa83 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000e06:	2210      	movs	r2, #16
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2078      	movs	r0, #120	@ 0x78
 8000e0c:	f000 fa7e 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e10:	22b0      	movs	r2, #176	@ 0xb0
 8000e12:	2100      	movs	r1, #0
 8000e14:	2078      	movs	r0, #120	@ 0x78
 8000e16:	f000 fa79 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000e1a:	22c8      	movs	r2, #200	@ 0xc8
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2078      	movs	r0, #120	@ 0x78
 8000e20:	f000 fa74 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000e24:	2200      	movs	r2, #0
 8000e26:	2100      	movs	r1, #0
 8000e28:	2078      	movs	r0, #120	@ 0x78
 8000e2a:	f000 fa6f 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000e2e:	2210      	movs	r2, #16
 8000e30:	2100      	movs	r1, #0
 8000e32:	2078      	movs	r0, #120	@ 0x78
 8000e34:	f000 fa6a 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000e38:	2240      	movs	r2, #64	@ 0x40
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2078      	movs	r0, #120	@ 0x78
 8000e3e:	f000 fa65 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000e42:	2281      	movs	r2, #129	@ 0x81
 8000e44:	2100      	movs	r1, #0
 8000e46:	2078      	movs	r0, #120	@ 0x78
 8000e48:	f000 fa60 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000e4c:	22ff      	movs	r2, #255	@ 0xff
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2078      	movs	r0, #120	@ 0x78
 8000e52:	f000 fa5b 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000e56:	22a1      	movs	r2, #161	@ 0xa1
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2078      	movs	r0, #120	@ 0x78
 8000e5c:	f000 fa56 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000e60:	22a6      	movs	r2, #166	@ 0xa6
 8000e62:	2100      	movs	r1, #0
 8000e64:	2078      	movs	r0, #120	@ 0x78
 8000e66:	f000 fa51 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000e6a:	22a8      	movs	r2, #168	@ 0xa8
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2078      	movs	r0, #120	@ 0x78
 8000e70:	f000 fa4c 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000e74:	223f      	movs	r2, #63	@ 0x3f
 8000e76:	2100      	movs	r1, #0
 8000e78:	2078      	movs	r0, #120	@ 0x78
 8000e7a:	f000 fa47 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000e7e:	22a4      	movs	r2, #164	@ 0xa4
 8000e80:	2100      	movs	r1, #0
 8000e82:	2078      	movs	r0, #120	@ 0x78
 8000e84:	f000 fa42 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000e88:	22d3      	movs	r2, #211	@ 0xd3
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2078      	movs	r0, #120	@ 0x78
 8000e8e:	f000 fa3d 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	2078      	movs	r0, #120	@ 0x78
 8000e98:	f000 fa38 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000e9c:	22d5      	movs	r2, #213	@ 0xd5
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2078      	movs	r0, #120	@ 0x78
 8000ea2:	f000 fa33 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000ea6:	22f0      	movs	r2, #240	@ 0xf0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2078      	movs	r0, #120	@ 0x78
 8000eac:	f000 fa2e 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000eb0:	22d9      	movs	r2, #217	@ 0xd9
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2078      	movs	r0, #120	@ 0x78
 8000eb6:	f000 fa29 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000eba:	2222      	movs	r2, #34	@ 0x22
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	2078      	movs	r0, #120	@ 0x78
 8000ec0:	f000 fa24 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000ec4:	22da      	movs	r2, #218	@ 0xda
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2078      	movs	r0, #120	@ 0x78
 8000eca:	f000 fa1f 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000ece:	2212      	movs	r2, #18
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2078      	movs	r0, #120	@ 0x78
 8000ed4:	f000 fa1a 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000ed8:	22db      	movs	r2, #219	@ 0xdb
 8000eda:	2100      	movs	r1, #0
 8000edc:	2078      	movs	r0, #120	@ 0x78
 8000ede:	f000 fa15 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2078      	movs	r0, #120	@ 0x78
 8000ee8:	f000 fa10 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000eec:	228d      	movs	r2, #141	@ 0x8d
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2078      	movs	r0, #120	@ 0x78
 8000ef2:	f000 fa0b 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000ef6:	2214      	movs	r2, #20
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2078      	movs	r0, #120	@ 0x78
 8000efc:	f000 fa06 	bl	800130c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000f00:	22af      	movs	r2, #175	@ 0xaf
 8000f02:	2100      	movs	r1, #0
 8000f04:	2078      	movs	r0, #120	@ 0x78
 8000f06:	f000 fa01 	bl	800130c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000f0a:	222e      	movs	r2, #46	@ 0x2e
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2078      	movs	r0, #120	@ 0x78
 8000f10:	f000 f9fc 	bl	800130c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000f14:	2000      	movs	r0, #0
 8000f16:	f000 f843 	bl	8000fa0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000f1a:	f000 f813 	bl	8000f44 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <SSD1306_Init+0x184>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <SSD1306_Init+0x184>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000f2a:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <SSD1306_Init+0x184>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000080 	.word	0x20000080
 8000f40:	200008e0 	.word	0x200008e0

08000f44 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	e01d      	b.n	8000f8c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	3b50      	subs	r3, #80	@ 0x50
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	461a      	mov	r2, r3
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2078      	movs	r0, #120	@ 0x78
 8000f5c:	f000 f9d6 	bl	800130c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2078      	movs	r0, #120	@ 0x78
 8000f66:	f000 f9d1 	bl	800130c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000f6a:	2210      	movs	r2, #16
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2078      	movs	r0, #120	@ 0x78
 8000f70:	f000 f9cc 	bl	800130c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	01db      	lsls	r3, r3, #7
 8000f78:	4a08      	ldr	r2, [pc, #32]	@ (8000f9c <SSD1306_UpdateScreen+0x58>)
 8000f7a:	441a      	add	r2, r3
 8000f7c:	2380      	movs	r3, #128	@ 0x80
 8000f7e:	2140      	movs	r1, #64	@ 0x40
 8000f80:	2078      	movs	r0, #120	@ 0x78
 8000f82:	f000 f95d 	bl	8001240 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	71fb      	strb	r3, [r7, #7]
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	2b07      	cmp	r3, #7
 8000f90:	d9de      	bls.n	8000f50 <SSD1306_UpdateScreen+0xc>
	}
}
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200004e0 	.word	0x200004e0

08000fa0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <SSD1306_Fill+0x14>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e000      	b.n	8000fb6 <SSD1306_Fill+0x16>
 8000fb4:	23ff      	movs	r3, #255	@ 0xff
 8000fb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4803      	ldr	r0, [pc, #12]	@ (8000fcc <SSD1306_Fill+0x2c>)
 8000fbe:	f004 ff4b 	bl	8005e58 <memset>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200004e0 	.word	0x200004e0

08000fd0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	80bb      	strh	r3, [r7, #4]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	70fb      	strb	r3, [r7, #3]
	if (
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fe6:	d848      	bhi.n	800107a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000fe8:	88bb      	ldrh	r3, [r7, #4]
 8000fea:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fec:	d845      	bhi.n	800107a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000fee:	4b26      	ldr	r3, [pc, #152]	@ (8001088 <SSD1306_DrawPixel+0xb8>)
 8000ff0:	791b      	ldrb	r3, [r3, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d006      	beq.n	8001004 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	bf0c      	ite	eq
 8000ffc:	2301      	moveq	r3, #1
 8000ffe:	2300      	movne	r3, #0
 8001000:	b2db      	uxtb	r3, r3
 8001002:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d11a      	bne.n	8001040 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800100a:	88fa      	ldrh	r2, [r7, #6]
 800100c:	88bb      	ldrh	r3, [r7, #4]
 800100e:	08db      	lsrs	r3, r3, #3
 8001010:	b298      	uxth	r0, r3
 8001012:	4603      	mov	r3, r0
 8001014:	01db      	lsls	r3, r3, #7
 8001016:	4413      	add	r3, r2
 8001018:	4a1c      	ldr	r2, [pc, #112]	@ (800108c <SSD1306_DrawPixel+0xbc>)
 800101a:	5cd3      	ldrb	r3, [r2, r3]
 800101c:	b25a      	sxtb	r2, r3
 800101e:	88bb      	ldrh	r3, [r7, #4]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	2101      	movs	r1, #1
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	b25b      	sxtb	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	b259      	sxtb	r1, r3
 8001030:	88fa      	ldrh	r2, [r7, #6]
 8001032:	4603      	mov	r3, r0
 8001034:	01db      	lsls	r3, r3, #7
 8001036:	4413      	add	r3, r2
 8001038:	b2c9      	uxtb	r1, r1
 800103a:	4a14      	ldr	r2, [pc, #80]	@ (800108c <SSD1306_DrawPixel+0xbc>)
 800103c:	54d1      	strb	r1, [r2, r3]
 800103e:	e01d      	b.n	800107c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001040:	88fa      	ldrh	r2, [r7, #6]
 8001042:	88bb      	ldrh	r3, [r7, #4]
 8001044:	08db      	lsrs	r3, r3, #3
 8001046:	b298      	uxth	r0, r3
 8001048:	4603      	mov	r3, r0
 800104a:	01db      	lsls	r3, r3, #7
 800104c:	4413      	add	r3, r2
 800104e:	4a0f      	ldr	r2, [pc, #60]	@ (800108c <SSD1306_DrawPixel+0xbc>)
 8001050:	5cd3      	ldrb	r3, [r2, r3]
 8001052:	b25a      	sxtb	r2, r3
 8001054:	88bb      	ldrh	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	2101      	movs	r1, #1
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	b25b      	sxtb	r3, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	b25b      	sxtb	r3, r3
 8001066:	4013      	ands	r3, r2
 8001068:	b259      	sxtb	r1, r3
 800106a:	88fa      	ldrh	r2, [r7, #6]
 800106c:	4603      	mov	r3, r0
 800106e:	01db      	lsls	r3, r3, #7
 8001070:	4413      	add	r3, r2
 8001072:	b2c9      	uxtb	r1, r1
 8001074:	4a05      	ldr	r2, [pc, #20]	@ (800108c <SSD1306_DrawPixel+0xbc>)
 8001076:	54d1      	strb	r1, [r2, r3]
 8001078:	e000      	b.n	800107c <SSD1306_DrawPixel+0xac>
		return;
 800107a:	bf00      	nop
	}
}
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	200008e0 	.word	0x200008e0
 800108c:	200004e0 	.word	0x200004e0

08001090 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	460a      	mov	r2, r1
 800109a:	80fb      	strh	r3, [r7, #6]
 800109c:	4613      	mov	r3, r2
 800109e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80010a0:	4a05      	ldr	r2, [pc, #20]	@ (80010b8 <SSD1306_GotoXY+0x28>)
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80010a6:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <SSD1306_GotoXY+0x28>)
 80010a8:	88bb      	ldrh	r3, [r7, #4]
 80010aa:	8053      	strh	r3, [r2, #2]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	200008e0 	.word	0x200008e0

080010bc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80010cc:	4b39      	ldr	r3, [pc, #228]	@ (80011b4 <SSD1306_Putc+0xf8>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
	if (
 80010d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80010da:	dc07      	bgt.n	80010ec <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80010dc:	4b35      	ldr	r3, [pc, #212]	@ (80011b4 <SSD1306_Putc+0xf8>)
 80010de:	885b      	ldrh	r3, [r3, #2]
 80010e0:	461a      	mov	r2, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	785b      	ldrb	r3, [r3, #1]
 80010e6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80010e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80010ea:	dd01      	ble.n	80010f0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	e05d      	b.n	80011ac <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	e04b      	b.n	800118e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	3b20      	subs	r3, #32
 80010fe:	6839      	ldr	r1, [r7, #0]
 8001100:	7849      	ldrb	r1, [r1, #1]
 8001102:	fb01 f303 	mul.w	r3, r1, r3
 8001106:	4619      	mov	r1, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	440b      	add	r3, r1
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	e030      	b.n	800117c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d010      	beq.n	800114c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800112a:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <SSD1306_Putc+0xf8>)
 800112c:	881a      	ldrh	r2, [r3, #0]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	b29b      	uxth	r3, r3
 8001132:	4413      	add	r3, r2
 8001134:	b298      	uxth	r0, r3
 8001136:	4b1f      	ldr	r3, [pc, #124]	@ (80011b4 <SSD1306_Putc+0xf8>)
 8001138:	885a      	ldrh	r2, [r3, #2]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	b29b      	uxth	r3, r3
 800113e:	4413      	add	r3, r2
 8001140:	b29b      	uxth	r3, r3
 8001142:	79ba      	ldrb	r2, [r7, #6]
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff ff43 	bl	8000fd0 <SSD1306_DrawPixel>
 800114a:	e014      	b.n	8001176 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800114c:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <SSD1306_Putc+0xf8>)
 800114e:	881a      	ldrh	r2, [r3, #0]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	b29b      	uxth	r3, r3
 8001154:	4413      	add	r3, r2
 8001156:	b298      	uxth	r0, r3
 8001158:	4b16      	ldr	r3, [pc, #88]	@ (80011b4 <SSD1306_Putc+0xf8>)
 800115a:	885a      	ldrh	r2, [r3, #2]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	b29b      	uxth	r3, r3
 8001160:	4413      	add	r3, r2
 8001162:	b299      	uxth	r1, r3
 8001164:	79bb      	ldrb	r3, [r7, #6]
 8001166:	2b00      	cmp	r3, #0
 8001168:	bf0c      	ite	eq
 800116a:	2301      	moveq	r3, #1
 800116c:	2300      	movne	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	f7ff ff2d 	bl	8000fd0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	3301      	adds	r3, #1
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4293      	cmp	r3, r2
 8001186:	d3c8      	bcc.n	800111a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3301      	adds	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	785b      	ldrb	r3, [r3, #1]
 8001192:	461a      	mov	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	4293      	cmp	r3, r2
 8001198:	d3ad      	bcc.n	80010f6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <SSD1306_Putc+0xf8>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	7812      	ldrb	r2, [r2, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b03      	ldr	r3, [pc, #12]	@ (80011b4 <SSD1306_Putc+0xf8>)
 80011a8:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80011aa:	79fb      	ldrb	r3, [r7, #7]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200008e0 	.word	0x200008e0

080011b8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	4613      	mov	r3, r2
 80011c4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80011c6:	e012      	b.n	80011ee <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	79fa      	ldrb	r2, [r7, #7]
 80011ce:	68b9      	ldr	r1, [r7, #8]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff73 	bl	80010bc <SSD1306_Putc>
 80011d6:	4603      	mov	r3, r0
 80011d8:	461a      	mov	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d002      	beq.n	80011e8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	e008      	b.n	80011fa <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	3301      	adds	r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1e8      	bne.n	80011c8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	781b      	ldrb	r3, [r3, #0]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001206:	2000      	movs	r0, #0
 8001208:	f7ff feca 	bl	8000fa0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800120c:	f7ff fe9a 	bl	8000f44 <SSD1306_UpdateScreen>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <ssd1306_I2C_Init+0x28>)
 800121c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800121e:	e002      	b.n	8001226 <ssd1306_I2C_Init+0x12>
		p--;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f9      	bne.n	8001220 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	0003d090 	.word	0x0003d090

08001240 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b0c7      	sub	sp, #284	@ 0x11c
 8001244:	af02      	add	r7, sp, #8
 8001246:	4604      	mov	r4, r0
 8001248:	4608      	mov	r0, r1
 800124a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800124e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001252:	600a      	str	r2, [r1, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800125a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800125e:	4622      	mov	r2, r4
 8001260:	701a      	strb	r2, [r3, #0]
 8001262:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001266:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800126a:	4602      	mov	r2, r0
 800126c:	701a      	strb	r2, [r3, #0]
 800126e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001272:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001276:	460a      	mov	r2, r1
 8001278:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800127a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800127e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001282:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001286:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800128a:	7812      	ldrb	r2, [r2, #0]
 800128c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800128e:	2300      	movs	r3, #0
 8001290:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001294:	e015      	b.n	80012c2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001296:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800129a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800129e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80012a2:	6812      	ldr	r2, [r2, #0]
 80012a4:	441a      	add	r2, r3
 80012a6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80012aa:	3301      	adds	r3, #1
 80012ac:	7811      	ldrb	r1, [r2, #0]
 80012ae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012b2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80012b6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80012b8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80012bc:	3301      	adds	r3, #1
 80012be:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80012c2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80012cc:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80012d0:	8812      	ldrh	r2, [r2, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d8df      	bhi.n	8001296 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80012d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012da:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b299      	uxth	r1, r3
 80012e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	f107 020c 	add.w	r2, r7, #12
 80012f4:	200a      	movs	r0, #10
 80012f6:	9000      	str	r0, [sp, #0]
 80012f8:	4803      	ldr	r0, [pc, #12]	@ (8001308 <ssd1306_I2C_WriteMulti+0xc8>)
 80012fa:	f000 fde9 	bl	8001ed0 <HAL_I2C_Master_Transmit>
}
 80012fe:	bf00      	nop
 8001300:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001304:	46bd      	mov	sp, r7
 8001306:	bd90      	pop	{r4, r7, pc}
 8001308:	20000080 	.word	0x20000080

0800130c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af02      	add	r7, sp, #8
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
 8001316:	460b      	mov	r3, r1
 8001318:	71bb      	strb	r3, [r7, #6]
 800131a:	4613      	mov	r3, r2
 800131c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800131e:	79bb      	ldrb	r3, [r7, #6]
 8001320:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001322:	797b      	ldrb	r3, [r7, #5]
 8001324:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	b299      	uxth	r1, r3
 800132a:	f107 020c 	add.w	r2, r7, #12
 800132e:	230a      	movs	r3, #10
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2302      	movs	r3, #2
 8001334:	4803      	ldr	r0, [pc, #12]	@ (8001344 <ssd1306_I2C_Write+0x38>)
 8001336:	f000 fdcb 	bl	8001ed0 <HAL_I2C_Master_Transmit>
}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000080 	.word	0x20000080

08001348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <HAL_MspInit+0x44>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	4a0e      	ldr	r2, [pc, #56]	@ (800138c <HAL_MspInit+0x44>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6193      	str	r3, [r2, #24]
 800135a:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <HAL_MspInit+0x44>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <HAL_MspInit+0x44>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	4a08      	ldr	r2, [pc, #32]	@ (800138c <HAL_MspInit+0x44>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001370:	61d3      	str	r3, [r2, #28]
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_MspInit+0x44>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	@ 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a17      	ldr	r2, [pc, #92]	@ (800140c <HAL_I2C_MspInit+0x7c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d127      	bne.n	8001402 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <HAL_I2C_MspInit+0x80>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	4a16      	ldr	r2, [pc, #88]	@ (8001410 <HAL_I2C_MspInit+0x80>)
 80013b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013bc:	6153      	str	r3, [r2, #20]
 80013be:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <HAL_I2C_MspInit+0x80>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ca:	23c0      	movs	r3, #192	@ 0xc0
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ce:	2312      	movs	r3, #18
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013da:	2304      	movs	r3, #4
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	480b      	ldr	r0, [pc, #44]	@ (8001414 <HAL_I2C_MspInit+0x84>)
 80013e6:	f000 fb71 	bl	8001acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <HAL_I2C_MspInit+0x80>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	4a08      	ldr	r2, [pc, #32]	@ (8001410 <HAL_I2C_MspInit+0x80>)
 80013f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013f4:	61d3      	str	r3, [r2, #28]
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_I2C_MspInit+0x80>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3728      	adds	r7, #40	@ 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40005400 	.word	0x40005400
 8001410:	40021000 	.word	0x40021000
 8001414:	48000400 	.word	0x48000400

08001418 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	@ 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001438:	d130      	bne.n	800149c <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800143a:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <HAL_TIM_Base_MspInit+0x8c>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	4a19      	ldr	r2, [pc, #100]	@ (80014a4 <HAL_TIM_Base_MspInit+0x8c>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	61d3      	str	r3, [r2, #28]
 8001446:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <HAL_TIM_Base_MspInit+0x8c>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <HAL_TIM_Base_MspInit+0x8c>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4a13      	ldr	r2, [pc, #76]	@ (80014a4 <HAL_TIM_Base_MspInit+0x8c>)
 8001458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800145c:	6153      	str	r3, [r2, #20]
 800145e:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <HAL_TIM_Base_MspInit+0x8c>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800146a:	2301      	movs	r3, #1
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800147a:	2301      	movs	r3, #1
 800147c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001488:	f000 fb20 	bl	8001acc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	201c      	movs	r0, #28
 8001492:	f000 fa6e 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001496:	201c      	movs	r0, #28
 8001498:	f000 fa87 	bl	80019aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	@ 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021000 	.word	0x40021000

080014a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	@ 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001534 <HAL_UART_MspInit+0x8c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d130      	bne.n	800152c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <HAL_UART_MspInit+0x90>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001538 <HAL_UART_MspInit+0x90>)
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d4:	61d3      	str	r3, [r2, #28]
 80014d6:	4b18      	ldr	r3, [pc, #96]	@ (8001538 <HAL_UART_MspInit+0x90>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <HAL_UART_MspInit+0x90>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	4a14      	ldr	r2, [pc, #80]	@ (8001538 <HAL_UART_MspInit+0x90>)
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ec:	6153      	str	r3, [r2, #20]
 80014ee:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <HAL_UART_MspInit+0x90>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014fa:	230c      	movs	r3, #12
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800150a:	2307      	movs	r3, #7
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001518:	f000 fad8 	bl	8001acc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	2026      	movs	r0, #38	@ 0x26
 8001522:	f000 fa26 	bl	8001972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001526:	2026      	movs	r0, #38	@ 0x26
 8001528:	f000 fa3f 	bl	80019aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800152c:	bf00      	nop
 800152e:	3728      	adds	r7, #40	@ 0x28
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40004400 	.word	0x40004400
 8001538:	40021000 	.word	0x40021000

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <NMI_Handler+0x4>

08001544 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <HardFault_Handler+0x4>

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <MemManage_Handler+0x4>

08001554 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <UsageFault_Handler+0x4>

08001564 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001592:	f000 f8cf 	bl	8001734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a0:	4802      	ldr	r0, [pc, #8]	@ (80015ac <TIM2_IRQHandler+0x10>)
 80015a2:	f002 ff17 	bl	80043d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200000d4 	.word	0x200000d4

080015b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015b4:	4802      	ldr	r0, [pc, #8]	@ (80015c0 <USART2_IRQHandler+0x10>)
 80015b6:	f003 fd93 	bl	80050e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000120 	.word	0x20000120

080015c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015cc:	4a14      	ldr	r2, [pc, #80]	@ (8001620 <_sbrk+0x5c>)
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <_sbrk+0x60>)
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <_sbrk+0x64>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	@ (800162c <_sbrk+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d207      	bcs.n	8001604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f4:	f004 fc38 	bl	8005e68 <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	220c      	movs	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	e009      	b.n	8001618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160a:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <_sbrk+0x64>)
 8001614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20004000 	.word	0x20004000
 8001624:	00000400 	.word	0x00000400
 8001628:	200008e8 	.word	0x200008e8
 800162c:	20000a38 	.word	0x20000a38

08001630 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <SystemInit+0x20>)
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800163a:	4a05      	ldr	r2, [pc, #20]	@ (8001650 <SystemInit+0x20>)
 800163c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001640:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800168c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001658:	f7ff ffea 	bl	8001630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800165c:	480c      	ldr	r0, [pc, #48]	@ (8001690 <LoopForever+0x6>)
  ldr r1, =_edata
 800165e:	490d      	ldr	r1, [pc, #52]	@ (8001694 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001660:	4a0d      	ldr	r2, [pc, #52]	@ (8001698 <LoopForever+0xe>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001674:	4c0a      	ldr	r4, [pc, #40]	@ (80016a0 <LoopForever+0x16>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001682:	f004 fbf7 	bl	8005e74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001686:	f7ff f901 	bl	800088c <main>

0800168a <LoopForever>:

LoopForever:
    b LoopForever
 800168a:	e7fe      	b.n	800168a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800168c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001698:	08006f94 	.word	0x08006f94
  ldr r2, =_sbss
 800169c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80016a0:	20000a38 	.word	0x20000a38

080016a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC1_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ac:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <HAL_Init+0x28>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a07      	ldr	r2, [pc, #28]	@ (80016d0 <HAL_Init+0x28>)
 80016b2:	f043 0310 	orr.w	r3, r3, #16
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f000 f94f 	bl	800195c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016be:	200f      	movs	r0, #15
 80016c0:	f000 f808 	bl	80016d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c4:	f7ff fe40 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40022000 	.word	0x40022000

080016d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016dc:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <HAL_InitTick+0x54>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b12      	ldr	r3, [pc, #72]	@ (800172c <HAL_InitTick+0x58>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f967 	bl	80019c6 <HAL_SYSTICK_Config>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e00e      	b.n	8001720 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b0f      	cmp	r3, #15
 8001706:	d80a      	bhi.n	800171e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001708:	2200      	movs	r2, #0
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f000 f92f 	bl	8001972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001714:	4a06      	ldr	r2, [pc, #24]	@ (8001730 <HAL_InitTick+0x5c>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	e000      	b.n	8001720 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000008 	.word	0x20000008
 800172c:	20000010 	.word	0x20000010
 8001730:	2000000c 	.word	0x2000000c

08001734 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_IncTick+0x20>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HAL_IncTick+0x24>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	4a04      	ldr	r2, [pc, #16]	@ (8001758 <HAL_IncTick+0x24>)
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000010 	.word	0x20000010
 8001758:	200008ec 	.word	0x200008ec

0800175c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001760:	4b03      	ldr	r3, [pc, #12]	@ (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	200008ec 	.word	0x200008ec

08001774 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff ffee 	bl	800175c <HAL_GetTick>
 8001780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178c:	d005      	beq.n	800179a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178e:	4b0a      	ldr	r3, [pc, #40]	@ (80017b8 <HAL_Delay+0x44>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800179a:	bf00      	nop
 800179c:	f7ff ffde 	bl	800175c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d8f7      	bhi.n	800179c <HAL_Delay+0x28>
  {
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000010 	.word	0x20000010

080017bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017d8:	4013      	ands	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ee:	4a04      	ldr	r2, [pc, #16]	@ (8001800 <__NVIC_SetPriorityGrouping+0x44>)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	60d3      	str	r3, [r2, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001808:	4b04      	ldr	r3, [pc, #16]	@ (800181c <__NVIC_GetPriorityGrouping+0x18>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	f003 0307 	and.w	r3, r3, #7
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	2b00      	cmp	r3, #0
 8001830:	db0b      	blt.n	800184a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	f003 021f 	and.w	r2, r3, #31
 8001838:	4907      	ldr	r1, [pc, #28]	@ (8001858 <__NVIC_EnableIRQ+0x38>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	2001      	movs	r0, #1
 8001842:	fa00 f202 	lsl.w	r2, r0, r2
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000e100 	.word	0xe000e100

0800185c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	6039      	str	r1, [r7, #0]
 8001866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db0a      	blt.n	8001886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	490c      	ldr	r1, [pc, #48]	@ (80018a8 <__NVIC_SetPriority+0x4c>)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	0112      	lsls	r2, r2, #4
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	440b      	add	r3, r1
 8001880:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001884:	e00a      	b.n	800189c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4908      	ldr	r1, [pc, #32]	@ (80018ac <__NVIC_SetPriority+0x50>)
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	3b04      	subs	r3, #4
 8001894:	0112      	lsls	r2, r2, #4
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	440b      	add	r3, r1
 800189a:	761a      	strb	r2, [r3, #24]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000e100 	.word	0xe000e100
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	@ 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f1c3 0307 	rsb	r3, r3, #7
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	bf28      	it	cs
 80018ce:	2304      	movcs	r3, #4
 80018d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3304      	adds	r3, #4
 80018d6:	2b06      	cmp	r3, #6
 80018d8:	d902      	bls.n	80018e0 <NVIC_EncodePriority+0x30>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3b03      	subs	r3, #3
 80018de:	e000      	b.n	80018e2 <NVIC_EncodePriority+0x32>
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43da      	mvns	r2, r3
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	401a      	ands	r2, r3
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43d9      	mvns	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	4313      	orrs	r3, r2
         );
}
 800190a:	4618      	mov	r0, r3
 800190c:	3724      	adds	r7, #36	@ 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001928:	d301      	bcc.n	800192e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192a:	2301      	movs	r3, #1
 800192c:	e00f      	b.n	800194e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192e:	4a0a      	ldr	r2, [pc, #40]	@ (8001958 <SysTick_Config+0x40>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001936:	210f      	movs	r1, #15
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f7ff ff8e 	bl	800185c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001940:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <SysTick_Config+0x40>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001946:	4b04      	ldr	r3, [pc, #16]	@ (8001958 <SysTick_Config+0x40>)
 8001948:	2207      	movs	r2, #7
 800194a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	e000e010 	.word	0xe000e010

0800195c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff29 	bl	80017bc <__NVIC_SetPriorityGrouping>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001984:	f7ff ff3e 	bl	8001804 <__NVIC_GetPriorityGrouping>
 8001988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	6978      	ldr	r0, [r7, #20]
 8001990:	f7ff ff8e 	bl	80018b0 <NVIC_EncodePriority>
 8001994:	4602      	mov	r2, r0
 8001996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff5d 	bl	800185c <__NVIC_SetPriority>
}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff31 	bl	8001820 <__NVIC_EnableIRQ>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffa2 	bl	8001918 <SysTick_Config>
 80019d4:	4603      	mov	r3, r0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d008      	beq.n	8001a02 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2204      	movs	r2, #4
 80019f4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e020      	b.n	8001a44 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 020e 	bic.w	r2, r2, #14
 8001a10:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0201 	bic.w	r2, r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a30:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d005      	beq.n	8001a72 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2204      	movs	r2, #4
 8001a6a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
 8001a70:	e027      	b.n	8001ac2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 020e 	bic.w	r2, r2, #14
 8001a80:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0201 	bic.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	4798      	blx	r3
    } 
  }
  return status;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ada:	e14e      	b.n	8001d7a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 8140 	beq.w	8001d74 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d005      	beq.n	8001b0c <HAL_GPIO_Init+0x40>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d130      	bne.n	8001b6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b42:	2201      	movs	r2, #1
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	091b      	lsrs	r3, r3, #4
 8001b58:	f003 0201 	and.w	r2, r3, #1
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d017      	beq.n	8001baa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d123      	bne.n	8001bfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	08da      	lsrs	r2, r3, #3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3208      	adds	r2, #8
 8001bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	08da      	lsrs	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3208      	adds	r2, #8
 8001bf8:	6939      	ldr	r1, [r7, #16]
 8001bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	2203      	movs	r2, #3
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0203 	and.w	r2, r3, #3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 809a 	beq.w	8001d74 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c40:	4b55      	ldr	r3, [pc, #340]	@ (8001d98 <HAL_GPIO_Init+0x2cc>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a54      	ldr	r2, [pc, #336]	@ (8001d98 <HAL_GPIO_Init+0x2cc>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b52      	ldr	r3, [pc, #328]	@ (8001d98 <HAL_GPIO_Init+0x2cc>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c58:	4a50      	ldr	r2, [pc, #320]	@ (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c82:	d013      	beq.n	8001cac <HAL_GPIO_Init+0x1e0>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a46      	ldr	r2, [pc, #280]	@ (8001da0 <HAL_GPIO_Init+0x2d4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d00d      	beq.n	8001ca8 <HAL_GPIO_Init+0x1dc>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a45      	ldr	r2, [pc, #276]	@ (8001da4 <HAL_GPIO_Init+0x2d8>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d007      	beq.n	8001ca4 <HAL_GPIO_Init+0x1d8>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a44      	ldr	r2, [pc, #272]	@ (8001da8 <HAL_GPIO_Init+0x2dc>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d101      	bne.n	8001ca0 <HAL_GPIO_Init+0x1d4>
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e006      	b.n	8001cae <HAL_GPIO_Init+0x1e2>
 8001ca0:	2305      	movs	r3, #5
 8001ca2:	e004      	b.n	8001cae <HAL_GPIO_Init+0x1e2>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e002      	b.n	8001cae <HAL_GPIO_Init+0x1e2>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <HAL_GPIO_Init+0x1e2>
 8001cac:	2300      	movs	r3, #0
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	f002 0203 	and.w	r2, r2, #3
 8001cb4:	0092      	lsls	r2, r2, #2
 8001cb6:	4093      	lsls	r3, r2
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cbe:	4937      	ldr	r1, [pc, #220]	@ (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ccc:	4b37      	ldr	r3, [pc, #220]	@ (8001dac <HAL_GPIO_Init+0x2e0>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cf0:	4a2e      	ldr	r2, [pc, #184]	@ (8001dac <HAL_GPIO_Init+0x2e0>)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8001dac <HAL_GPIO_Init+0x2e0>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d1a:	4a24      	ldr	r2, [pc, #144]	@ (8001dac <HAL_GPIO_Init+0x2e0>)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d20:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <HAL_GPIO_Init+0x2e0>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d44:	4a19      	ldr	r2, [pc, #100]	@ (8001dac <HAL_GPIO_Init+0x2e0>)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d4a:	4b18      	ldr	r3, [pc, #96]	@ (8001dac <HAL_GPIO_Init+0x2e0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001dac <HAL_GPIO_Init+0x2e0>)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	3301      	adds	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	fa22 f303 	lsr.w	r3, r2, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f47f aea9 	bne.w	8001adc <HAL_GPIO_Init+0x10>
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	bf00      	nop
 8001d8e:	371c      	adds	r7, #28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40010000 	.word	0x40010000
 8001da0:	48000400 	.word	0x48000400
 8001da4:	48000800 	.word	0x48000800
 8001da8:	48000c00 	.word	0x48000c00
 8001dac:	40010400 	.word	0x40010400

08001db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e081      	b.n	8001ec6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d106      	bne.n	8001ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff fada 	bl	8001390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2224      	movs	r2, #36	@ 0x24
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d107      	bne.n	8001e2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	e006      	b.n	8001e38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d104      	bne.n	8001e4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691a      	ldr	r2, [r3, #16]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69d9      	ldr	r1, [r3, #28]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1a      	ldr	r2, [r3, #32]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2220      	movs	r2, #32
 8001eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	461a      	mov	r2, r3
 8001edc:	460b      	mov	r3, r1
 8001ede:	817b      	strh	r3, [r7, #10]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	f040 80da 	bne.w	80020a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_I2C_Master_Transmit+0x30>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e0d3      	b.n	80020a8 <HAL_I2C_Master_Transmit+0x1d8>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f08:	f7ff fc28 	bl	800175c <HAL_GetTick>
 8001f0c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2319      	movs	r3, #25
 8001f14:	2201      	movs	r2, #1
 8001f16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f9f9 	bl	8002312 <I2C_WaitOnFlagUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0be      	b.n	80020a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2221      	movs	r2, #33	@ 0x21
 8001f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2210      	movs	r2, #16
 8001f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	893a      	ldrh	r2, [r7, #8]
 8001f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2bff      	cmp	r3, #255	@ 0xff
 8001f5a:	d90e      	bls.n	8001f7a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	22ff      	movs	r2, #255	@ 0xff
 8001f60:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	8979      	ldrh	r1, [r7, #10]
 8001f6a:	4b51      	ldr	r3, [pc, #324]	@ (80020b0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 fb86 	bl	8002684 <I2C_TransferConfig>
 8001f78:	e06c      	b.n	8002054 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	8979      	ldrh	r1, [r7, #10]
 8001f8c:	4b48      	ldr	r3, [pc, #288]	@ (80020b0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 fb75 	bl	8002684 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001f9a:	e05b      	b.n	8002054 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	6a39      	ldr	r1, [r7, #32]
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 fa05 	bl	80023b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e07b      	b.n	80020a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d034      	beq.n	8002054 <HAL_I2C_Master_Transmit+0x184>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d130      	bne.n	8002054 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2180      	movs	r1, #128	@ 0x80
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 f988 	bl	8002312 <I2C_WaitOnFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e04d      	b.n	80020a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	2bff      	cmp	r3, #255	@ 0xff
 8002014:	d90e      	bls.n	8002034 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	22ff      	movs	r2, #255	@ 0xff
 800201a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002020:	b2da      	uxtb	r2, r3
 8002022:	8979      	ldrh	r1, [r7, #10]
 8002024:	2300      	movs	r3, #0
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 fb29 	bl	8002684 <I2C_TransferConfig>
 8002032:	e00f      	b.n	8002054 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002042:	b2da      	uxtb	r2, r3
 8002044:	8979      	ldrh	r1, [r7, #10]
 8002046:	2300      	movs	r3, #0
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 fb18 	bl	8002684 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002058:	b29b      	uxth	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d19e      	bne.n	8001f9c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	6a39      	ldr	r1, [r7, #32]
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 f9eb 	bl	800243e <I2C_WaitOnSTOPFlagUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e01a      	b.n	80020a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2220      	movs	r2, #32
 8002078:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b0b      	ldr	r3, [pc, #44]	@ (80020b4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002086:	400b      	ands	r3, r1
 8002088:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80020a6:	2302      	movs	r3, #2
  }
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	80002000 	.word	0x80002000
 80020b4:	fe00e800 	.word	0xfe00e800

080020b8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	@ 0x28
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	607a      	str	r2, [r7, #4]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	460b      	mov	r3, r1
 80020c6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	f040 80f3 	bne.w	80022c0 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020e8:	d101      	bne.n	80020ee <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80020ea:	2302      	movs	r3, #2
 80020ec:	e0e9      	b.n	80022c2 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_I2C_IsDeviceReady+0x44>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e0e2      	b.n	80022c2 <HAL_I2C_IsDeviceReady+0x20a>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2224      	movs	r2, #36	@ 0x24
 8002108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_I2C_IsDeviceReady+0x72>
 800211a:	897b      	ldrh	r3, [r7, #10]
 800211c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002120:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002124:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002128:	e006      	b.n	8002138 <HAL_I2C_IsDeviceReady+0x80>
 800212a:	897b      	ldrh	r3, [r7, #10]
 800212c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002130:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002134:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800213e:	f7ff fb0d 	bl	800175c <HAL_GetTick>
 8002142:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	2b20      	cmp	r3, #32
 8002150:	bf0c      	ite	eq
 8002152:	2301      	moveq	r3, #1
 8002154:	2300      	movne	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b10      	cmp	r3, #16
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002170:	e034      	b.n	80021dc <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002178:	d01a      	beq.n	80021b0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800217a:	f7ff faef 	bl	800175c <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d302      	bcc.n	8002190 <HAL_I2C_IsDeviceReady+0xd8>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10f      	bne.n	80021b0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219c:	f043 0220 	orr.w	r2, r3, #32
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e088      	b.n	80022c2 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f003 0320 	and.w	r3, r3, #32
 80021ba:	2b20      	cmp	r3, #32
 80021bc:	bf0c      	ite	eq
 80021be:	2301      	moveq	r3, #1
 80021c0:	2300      	movne	r3, #0
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b10      	cmp	r3, #16
 80021d2:	bf0c      	ite	eq
 80021d4:	2301      	moveq	r3, #1
 80021d6:	2300      	movne	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80021dc:	7ffb      	ldrb	r3, [r7, #31]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d102      	bne.n	80021e8 <HAL_I2C_IsDeviceReady+0x130>
 80021e2:	7fbb      	ldrb	r3, [r7, #30]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0c4      	beq.n	8002172 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	2b10      	cmp	r3, #16
 80021f4:	d01a      	beq.n	800222c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	2200      	movs	r2, #0
 80021fe:	2120      	movs	r1, #32
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 f886 	bl	8002312 <I2C_WaitOnFlagUntilTimeout>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e058      	b.n	80022c2 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2220      	movs	r2, #32
 8002216:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	e04a      	b.n	80022c2 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	2200      	movs	r2, #0
 8002234:	2120      	movs	r1, #32
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f86b 	bl	8002312 <I2C_WaitOnFlagUntilTimeout>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e03d      	b.n	80022c2 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2210      	movs	r2, #16
 800224c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2220      	movs	r2, #32
 8002254:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	429a      	cmp	r2, r3
 800225c:	d118      	bne.n	8002290 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800226c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2200      	movs	r2, #0
 8002276:	2120      	movs	r1, #32
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 f84a 	bl	8002312 <I2C_WaitOnFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e01c      	b.n	80022c2 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2220      	movs	r2, #32
 800228e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	3301      	adds	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	429a      	cmp	r2, r3
 800229c:	f63f af39 	bhi.w	8002112 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ac:	f043 0220 	orr.w	r2, r3, #32
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80022c0:	2302      	movs	r3, #2
  }
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3720      	adds	r7, #32
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d103      	bne.n	80022e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2200      	movs	r2, #0
 80022e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d007      	beq.n	8002306 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 0201 	orr.w	r2, r2, #1
 8002304:	619a      	str	r2, [r3, #24]
  }
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b084      	sub	sp, #16
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	4613      	mov	r3, r2
 8002320:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002322:	e031      	b.n	8002388 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232a:	d02d      	beq.n	8002388 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232c:	f7ff fa16 	bl	800175c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d302      	bcc.n	8002342 <I2C_WaitOnFlagUntilTimeout+0x30>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d122      	bne.n	8002388 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699a      	ldr	r2, [r3, #24]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4013      	ands	r3, r2
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	429a      	cmp	r2, r3
 8002350:	bf0c      	ite	eq
 8002352:	2301      	moveq	r3, #1
 8002354:	2300      	movne	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	429a      	cmp	r2, r3
 800235e:	d113      	bne.n	8002388 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002364:	f043 0220 	orr.w	r2, r3, #32
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e00f      	b.n	80023a8 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	4013      	ands	r3, r2
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	429a      	cmp	r2, r3
 8002396:	bf0c      	ite	eq
 8002398:	2301      	moveq	r3, #1
 800239a:	2300      	movne	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d0be      	beq.n	8002324 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023bc:	e033      	b.n	8002426 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f87e 	bl	80024c4 <I2C_IsErrorOccurred>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e031      	b.n	8002436 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d8:	d025      	beq.n	8002426 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023da:	f7ff f9bf 	bl	800175c <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d302      	bcc.n	80023f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d11a      	bne.n	8002426 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d013      	beq.n	8002426 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	f043 0220 	orr.w	r2, r3, #32
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e007      	b.n	8002436 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b02      	cmp	r3, #2
 8002432:	d1c4      	bne.n	80023be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800244a:	e02f      	b.n	80024ac <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 f837 	bl	80024c4 <I2C_IsErrorOccurred>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e02d      	b.n	80024bc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002460:	f7ff f97c 	bl	800175c <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	429a      	cmp	r2, r3
 800246e:	d302      	bcc.n	8002476 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d11a      	bne.n	80024ac <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b20      	cmp	r3, #32
 8002482:	d013      	beq.n	80024ac <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002488:	f043 0220 	orr.w	r2, r3, #32
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e007      	b.n	80024bc <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f003 0320 	and.w	r3, r3, #32
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	d1c8      	bne.n	800244c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	@ 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d068      	beq.n	80025c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2210      	movs	r2, #16
 80024f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024f8:	e049      	b.n	800258e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d045      	beq.n	800258e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002502:	f7ff f92b 	bl	800175c <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	429a      	cmp	r2, r3
 8002510:	d302      	bcc.n	8002518 <I2C_IsErrorOccurred+0x54>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d13a      	bne.n	800258e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002522:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800252a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800253a:	d121      	bne.n	8002580 <I2C_IsErrorOccurred+0xbc>
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002542:	d01d      	beq.n	8002580 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002544:	7cfb      	ldrb	r3, [r7, #19]
 8002546:	2b20      	cmp	r3, #32
 8002548:	d01a      	beq.n	8002580 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002558:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800255a:	f7ff f8ff 	bl	800175c <HAL_GetTick>
 800255e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002560:	e00e      	b.n	8002580 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002562:	f7ff f8fb 	bl	800175c <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b19      	cmp	r3, #25
 800256e:	d907      	bls.n	8002580 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	f043 0320 	orr.w	r3, r3, #32
 8002576:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800257e:	e006      	b.n	800258e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b20      	cmp	r3, #32
 800258c:	d1e9      	bne.n	8002562 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b20      	cmp	r3, #32
 800259a:	d003      	beq.n	80025a4 <I2C_IsErrorOccurred+0xe0>
 800259c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0aa      	beq.n	80024fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80025a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d103      	bne.n	80025b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2220      	movs	r2, #32
 80025b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00b      	beq.n	80025ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	f043 0308 	orr.w	r3, r3, #8
 80025fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002606:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00b      	beq.n	8002630 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	f043 0302 	orr.w	r3, r3, #2
 800261e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002628:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002630:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01c      	beq.n	8002672 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f7ff fe46 	bl	80022ca <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b0d      	ldr	r3, [pc, #52]	@ (8002680 <I2C_IsErrorOccurred+0x1bc>)
 800264a:	400b      	ands	r3, r1
 800264c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	431a      	orrs	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002672:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002676:	4618      	mov	r0, r3
 8002678:	3728      	adds	r7, #40	@ 0x28
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	fe00e800 	.word	0xfe00e800

08002684 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	607b      	str	r3, [r7, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	817b      	strh	r3, [r7, #10]
 8002692:	4613      	mov	r3, r2
 8002694:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002696:	897b      	ldrh	r3, [r7, #10]
 8002698:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800269c:	7a7b      	ldrb	r3, [r7, #9]
 800269e:	041b      	lsls	r3, r3, #16
 80026a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	0d5b      	lsrs	r3, r3, #21
 80026be:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80026c2:	4b08      	ldr	r3, [pc, #32]	@ (80026e4 <I2C_TransferConfig+0x60>)
 80026c4:	430b      	orrs	r3, r1
 80026c6:	43db      	mvns	r3, r3
 80026c8:	ea02 0103 	and.w	r1, r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026d6:	bf00      	nop
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	03ff63ff 	.word	0x03ff63ff

080026e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b20      	cmp	r3, #32
 80026fc:	d138      	bne.n	8002770 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002708:	2302      	movs	r3, #2
 800270a:	e032      	b.n	8002772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2224      	movs	r2, #36	@ 0x24
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0201 	bic.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800273a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6819      	ldr	r1, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800276c:	2300      	movs	r3, #0
 800276e:	e000      	b.n	8002772 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002770:	2302      	movs	r3, #2
  }
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b20      	cmp	r3, #32
 8002792:	d139      	bne.n	8002808 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800279e:	2302      	movs	r3, #2
 80027a0:	e033      	b.n	800280a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2224      	movs	r2, #36	@ 0x24
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0201 	bic.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80027d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	e000      	b.n	800280a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002808:	2302      	movs	r3, #2
  }
}
 800280a:	4618      	mov	r0, r3
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800281e:	af00      	add	r7, sp, #0
 8002820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002824:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002828:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800282a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	f001 b823 	b.w	8003884 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002842:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 817d 	beq.w	8002b4e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002854:	4bbc      	ldr	r3, [pc, #752]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b04      	cmp	r3, #4
 800285e:	d00c      	beq.n	800287a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002860:	4bb9      	ldr	r3, [pc, #740]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 030c 	and.w	r3, r3, #12
 8002868:	2b08      	cmp	r3, #8
 800286a:	d15c      	bne.n	8002926 <HAL_RCC_OscConfig+0x10e>
 800286c:	4bb6      	ldr	r3, [pc, #728]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002878:	d155      	bne.n	8002926 <HAL_RCC_OscConfig+0x10e>
 800287a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800287e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800288e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	b2db      	uxtb	r3, r3
 8002898:	095b      	lsrs	r3, r3, #5
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d102      	bne.n	80028ac <HAL_RCC_OscConfig+0x94>
 80028a6:	4ba8      	ldr	r3, [pc, #672]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	e015      	b.n	80028d8 <HAL_RCC_OscConfig+0xc0>
 80028ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028b0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80028c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028c4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80028c8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80028d4:	4b9c      	ldr	r3, [pc, #624]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028dc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80028e0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80028e4:	fa92 f2a2 	rbit	r2, r2
 80028e8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80028ec:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80028f0:	fab2 f282 	clz	r2, r2
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	f042 0220 	orr.w	r2, r2, #32
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	f002 021f 	and.w	r2, r2, #31
 8002900:	2101      	movs	r1, #1
 8002902:	fa01 f202 	lsl.w	r2, r1, r2
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 811f 	beq.w	8002b4c <HAL_RCC_OscConfig+0x334>
 800290e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002912:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f040 8116 	bne.w	8002b4c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	f000 bfaf 	b.w	8003884 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002936:	d106      	bne.n	8002946 <HAL_RCC_OscConfig+0x12e>
 8002938:	4b83      	ldr	r3, [pc, #524]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a82      	ldr	r2, [pc, #520]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 800293e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	e036      	b.n	80029b4 <HAL_RCC_OscConfig+0x19c>
 8002946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0x158>
 8002956:	4b7c      	ldr	r3, [pc, #496]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a7b      	ldr	r2, [pc, #492]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 800295c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b79      	ldr	r3, [pc, #484]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a78      	ldr	r2, [pc, #480]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 8002968:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e021      	b.n	80029b4 <HAL_RCC_OscConfig+0x19c>
 8002970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002974:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002980:	d10c      	bne.n	800299c <HAL_RCC_OscConfig+0x184>
 8002982:	4b71      	ldr	r3, [pc, #452]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a70      	ldr	r2, [pc, #448]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 8002988:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	4b6e      	ldr	r3, [pc, #440]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a6d      	ldr	r2, [pc, #436]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 8002994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	e00b      	b.n	80029b4 <HAL_RCC_OscConfig+0x19c>
 800299c:	4b6a      	ldr	r3, [pc, #424]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a69      	ldr	r2, [pc, #420]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 80029a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	4b67      	ldr	r3, [pc, #412]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a66      	ldr	r2, [pc, #408]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 80029ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029b2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029b4:	4b64      	ldr	r3, [pc, #400]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	f023 020f 	bic.w	r2, r3, #15
 80029bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	495f      	ldr	r1, [pc, #380]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d059      	beq.n	8002a92 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029de:	f7fe febd 	bl	800175c <HAL_GetTick>
 80029e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e8:	f7fe feb8 	bl	800175c <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b64      	cmp	r3, #100	@ 0x64
 80029f6:	d902      	bls.n	80029fe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	f000 bf43 	b.w	8003884 <HAL_RCC_OscConfig+0x106c>
 80029fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a02:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002a12:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d102      	bne.n	8002a30 <HAL_RCC_OscConfig+0x218>
 8002a2a:	4b47      	ldr	r3, [pc, #284]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	e015      	b.n	8002a5c <HAL_RCC_OscConfig+0x244>
 8002a30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a34:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002a44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a48:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002a4c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002a50:	fa93 f3a3 	rbit	r3, r3
 8002a54:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002a58:	4b3b      	ldr	r3, [pc, #236]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a60:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002a64:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002a68:	fa92 f2a2 	rbit	r2, r2
 8002a6c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002a70:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002a74:	fab2 f282 	clz	r2, r2
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	f042 0220 	orr.w	r2, r2, #32
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	f002 021f 	and.w	r2, r2, #31
 8002a84:	2101      	movs	r1, #1
 8002a86:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0ab      	beq.n	80029e8 <HAL_RCC_OscConfig+0x1d0>
 8002a90:	e05d      	b.n	8002b4e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a92:	f7fe fe63 	bl	800175c <HAL_GetTick>
 8002a96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9a:	e00a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a9c:	f7fe fe5e 	bl	800175c <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b64      	cmp	r3, #100	@ 0x64
 8002aaa:	d902      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	f000 bee9 	b.w	8003884 <HAL_RCC_OscConfig+0x106c>
 8002ab2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ab6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002ac6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d102      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x2cc>
 8002ade:	4b1a      	ldr	r3, [pc, #104]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	e015      	b.n	8002b10 <HAL_RCC_OscConfig+0x2f8>
 8002ae4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ae8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002af8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002afc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002b00:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b48 <HAL_RCC_OscConfig+0x330>)
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b14:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002b18:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002b1c:	fa92 f2a2 	rbit	r2, r2
 8002b20:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002b24:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002b28:	fab2 f282 	clz	r2, r2
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	f042 0220 	orr.w	r2, r2, #32
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	f002 021f 	and.w	r2, r2, #31
 8002b38:	2101      	movs	r1, #1
 8002b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1ab      	bne.n	8002a9c <HAL_RCC_OscConfig+0x284>
 8002b44:	e003      	b.n	8002b4e <HAL_RCC_OscConfig+0x336>
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 817d 	beq.w	8002e5e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b64:	4ba6      	ldr	r3, [pc, #664]	@ (8002e00 <HAL_RCC_OscConfig+0x5e8>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00b      	beq.n	8002b88 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b70:	4ba3      	ldr	r3, [pc, #652]	@ (8002e00 <HAL_RCC_OscConfig+0x5e8>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d172      	bne.n	8002c62 <HAL_RCC_OscConfig+0x44a>
 8002b7c:	4ba0      	ldr	r3, [pc, #640]	@ (8002e00 <HAL_RCC_OscConfig+0x5e8>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d16c      	bne.n	8002c62 <HAL_RCC_OscConfig+0x44a>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002b9a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d102      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x3a0>
 8002bb2:	4b93      	ldr	r3, [pc, #588]	@ (8002e00 <HAL_RCC_OscConfig+0x5e8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	e013      	b.n	8002be0 <HAL_RCC_OscConfig+0x3c8>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002bca:	2302      	movs	r3, #2
 8002bcc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002bd0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002bdc:	4b88      	ldr	r3, [pc, #544]	@ (8002e00 <HAL_RCC_OscConfig+0x5e8>)
 8002bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be0:	2202      	movs	r2, #2
 8002be2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002be6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002bea:	fa92 f2a2 	rbit	r2, r2
 8002bee:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002bf2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002bf6:	fab2 f282 	clz	r2, r2
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	f042 0220 	orr.w	r2, r2, #32
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	f002 021f 	and.w	r2, r2, #31
 8002c06:	2101      	movs	r1, #1
 8002c08:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCC_OscConfig+0x410>
 8002c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d002      	beq.n	8002c28 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f000 be2e 	b.w	8003884 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c28:	4b75      	ldr	r3, [pc, #468]	@ (8002e00 <HAL_RCC_OscConfig+0x5e8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	21f8      	movs	r1, #248	@ 0xf8
 8002c3e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002c46:	fa91 f1a1 	rbit	r1, r1
 8002c4a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002c4e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002c52:	fab1 f181 	clz	r1, r1
 8002c56:	b2c9      	uxtb	r1, r1
 8002c58:	408b      	lsls	r3, r1
 8002c5a:	4969      	ldr	r1, [pc, #420]	@ (8002e00 <HAL_RCC_OscConfig+0x5e8>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c60:	e0fd      	b.n	8002e5e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8088 	beq.w	8002d84 <HAL_RCC_OscConfig+0x56c>
 8002c74:	2301      	movs	r3, #1
 8002c76:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002c86:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c8a:	fab3 f383 	clz	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c94:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fd5c 	bl	800175c <HAL_GetTick>
 8002ca4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002caa:	f7fe fd57 	bl	800175c <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d902      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	f000 bde2 	b.w	8003884 <HAL_RCC_OscConfig+0x106c>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002cd2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	095b      	lsrs	r3, r3, #5
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d102      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4d8>
 8002cea:	4b45      	ldr	r3, [pc, #276]	@ (8002e00 <HAL_RCC_OscConfig+0x5e8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	e013      	b.n	8002d18 <HAL_RCC_OscConfig+0x500>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002d02:	2302      	movs	r3, #2
 8002d04:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002d08:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002d14:	4b3a      	ldr	r3, [pc, #232]	@ (8002e00 <HAL_RCC_OscConfig+0x5e8>)
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	2202      	movs	r2, #2
 8002d1a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002d1e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002d22:	fa92 f2a2 	rbit	r2, r2
 8002d26:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002d2a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002d2e:	fab2 f282 	clz	r2, r2
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	f042 0220 	orr.w	r2, r2, #32
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	f002 021f 	and.w	r2, r2, #31
 8002d3e:	2101      	movs	r1, #1
 8002d40:	fa01 f202 	lsl.w	r2, r1, r2
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0af      	beq.n	8002caa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002e00 <HAL_RCC_OscConfig+0x5e8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	21f8      	movs	r1, #248	@ 0xf8
 8002d60:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002d68:	fa91 f1a1 	rbit	r1, r1
 8002d6c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002d70:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002d74:	fab1 f181 	clz	r1, r1
 8002d78:	b2c9      	uxtb	r1, r1
 8002d7a:	408b      	lsls	r3, r1
 8002d7c:	4920      	ldr	r1, [pc, #128]	@ (8002e00 <HAL_RCC_OscConfig+0x5e8>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]
 8002d82:	e06c      	b.n	8002e5e <HAL_RCC_OscConfig+0x646>
 8002d84:	2301      	movs	r3, #1
 8002d86:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002d96:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002da4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	461a      	mov	r2, r3
 8002dac:	2300      	movs	r3, #0
 8002dae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe fcd4 	bl	800175c <HAL_GetTick>
 8002db4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dba:	f7fe fccf 	bl	800175c <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d902      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	f000 bd5a 	b.w	8003884 <HAL_RCC_OscConfig+0x106c>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d104      	bne.n	8002e04 <HAL_RCC_OscConfig+0x5ec>
 8002dfa:	4b01      	ldr	r3, [pc, #4]	@ (8002e00 <HAL_RCC_OscConfig+0x5e8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	e015      	b.n	8002e2c <HAL_RCC_OscConfig+0x614>
 8002e00:	40021000 	.word	0x40021000
 8002e04:	2302      	movs	r3, #2
 8002e06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002e16:	2302      	movs	r3, #2
 8002e18:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002e1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002e28:	4bc8      	ldr	r3, [pc, #800]	@ (800314c <HAL_RCC_OscConfig+0x934>)
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002e32:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002e36:	fa92 f2a2 	rbit	r2, r2
 8002e3a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002e3e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002e42:	fab2 f282 	clz	r2, r2
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	f042 0220 	orr.w	r2, r2, #32
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	f002 021f 	and.w	r2, r2, #31
 8002e52:	2101      	movs	r1, #1
 8002e54:	fa01 f202 	lsl.w	r2, r1, r2
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1ad      	bne.n	8002dba <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 8110 	beq.w	8003094 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d079      	beq.n	8002f78 <HAL_RCC_OscConfig+0x760>
 8002e84:	2301      	movs	r3, #1
 8002e86:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9a:	fab3 f383 	clz	r3, r3
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4bab      	ldr	r3, [pc, #684]	@ (8003150 <HAL_RCC_OscConfig+0x938>)
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2301      	movs	r3, #1
 8002eac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7fe fc55 	bl	800175c <HAL_GetTick>
 8002eb2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb6:	e00a      	b.n	8002ece <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb8:	f7fe fc50 	bl	800175c <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d902      	bls.n	8002ece <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	f000 bcdb 	b.w	8003884 <HAL_RCC_OscConfig+0x106c>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ee8:	2202      	movs	r2, #2
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	fa93 f2a3 	rbit	r2, r3
 8002efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	fa93 f2a3 	rbit	r2, r3
 8002f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f22:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f26:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f28:	4b88      	ldr	r3, [pc, #544]	@ (800314c <HAL_RCC_OscConfig+0x934>)
 8002f2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f30:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002f34:	2102      	movs	r1, #2
 8002f36:	6019      	str	r1, [r3, #0]
 8002f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	fa93 f1a3 	rbit	r1, r3
 8002f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f4e:	6019      	str	r1, [r3, #0]
  return result;
 8002f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f54:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	fab3 f383 	clz	r3, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0a0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x6a0>
 8002f76:	e08d      	b.n	8003094 <HAL_RCC_OscConfig+0x87c>
 8002f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f80:	2201      	movs	r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f88:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	fa93 f2a3 	rbit	r2, r3
 8002f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f96:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f9a:	601a      	str	r2, [r3, #0]
  return result;
 8002f9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002fa4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b68      	ldr	r3, [pc, #416]	@ (8003150 <HAL_RCC_OscConfig+0x938>)
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fba:	f7fe fbcf 	bl	800175c <HAL_GetTick>
 8002fbe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc4:	f7fe fbca 	bl	800175c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d902      	bls.n	8002fda <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	f000 bc55 	b.w	8003884 <HAL_RCC_OscConfig+0x106c>
 8002fda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fde:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	fa93 f2a3 	rbit	r2, r3
 8002ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003002:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003006:	2202      	movs	r2, #2
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	fa93 f2a3 	rbit	r2, r3
 8003018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003026:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800302a:	2202      	movs	r2, #2
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003032:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	fa93 f2a3 	rbit	r2, r3
 800303c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003040:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003044:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003046:	4b41      	ldr	r3, [pc, #260]	@ (800314c <HAL_RCC_OscConfig+0x934>)
 8003048:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800304a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800304e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003052:	2102      	movs	r1, #2
 8003054:	6019      	str	r1, [r3, #0]
 8003056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	fa93 f1a3 	rbit	r1, r3
 8003064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003068:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800306c:	6019      	str	r1, [r3, #0]
  return result;
 800306e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003072:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	fab3 f383 	clz	r3, r3
 800307c:	b2db      	uxtb	r3, r3
 800307e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	2101      	movs	r1, #1
 800308a:	fa01 f303 	lsl.w	r3, r1, r3
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d197      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003098:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 81a1 	beq.w	80033ec <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b0:	4b26      	ldr	r3, [pc, #152]	@ (800314c <HAL_RCC_OscConfig+0x934>)
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d116      	bne.n	80030ea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030bc:	4b23      	ldr	r3, [pc, #140]	@ (800314c <HAL_RCC_OscConfig+0x934>)
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	4a22      	ldr	r2, [pc, #136]	@ (800314c <HAL_RCC_OscConfig+0x934>)
 80030c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030c6:	61d3      	str	r3, [r2, #28]
 80030c8:	4b20      	ldr	r3, [pc, #128]	@ (800314c <HAL_RCC_OscConfig+0x934>)
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80030d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030de:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80030e2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80030e4:	2301      	movs	r3, #1
 80030e6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003154 <HAL_RCC_OscConfig+0x93c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d11a      	bne.n	800312c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f6:	4b17      	ldr	r3, [pc, #92]	@ (8003154 <HAL_RCC_OscConfig+0x93c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a16      	ldr	r2, [pc, #88]	@ (8003154 <HAL_RCC_OscConfig+0x93c>)
 80030fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003100:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003102:	f7fe fb2b 	bl	800175c <HAL_GetTick>
 8003106:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310a:	e009      	b.n	8003120 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310c:	f7fe fb26 	bl	800175c <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b64      	cmp	r3, #100	@ 0x64
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e3b1      	b.n	8003884 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003120:	4b0c      	ldr	r3, [pc, #48]	@ (8003154 <HAL_RCC_OscConfig+0x93c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0ef      	beq.n	800310c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003130:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d10d      	bne.n	8003158 <HAL_RCC_OscConfig+0x940>
 800313c:	4b03      	ldr	r3, [pc, #12]	@ (800314c <HAL_RCC_OscConfig+0x934>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4a02      	ldr	r2, [pc, #8]	@ (800314c <HAL_RCC_OscConfig+0x934>)
 8003142:	f043 0301 	orr.w	r3, r3, #1
 8003146:	6213      	str	r3, [r2, #32]
 8003148:	e03c      	b.n	80031c4 <HAL_RCC_OscConfig+0x9ac>
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000
 8003150:	10908120 	.word	0x10908120
 8003154:	40007000 	.word	0x40007000
 8003158:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10c      	bne.n	8003182 <HAL_RCC_OscConfig+0x96a>
 8003168:	4bc1      	ldr	r3, [pc, #772]	@ (8003470 <HAL_RCC_OscConfig+0xc58>)
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	4ac0      	ldr	r2, [pc, #768]	@ (8003470 <HAL_RCC_OscConfig+0xc58>)
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	6213      	str	r3, [r2, #32]
 8003174:	4bbe      	ldr	r3, [pc, #760]	@ (8003470 <HAL_RCC_OscConfig+0xc58>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	4abd      	ldr	r2, [pc, #756]	@ (8003470 <HAL_RCC_OscConfig+0xc58>)
 800317a:	f023 0304 	bic.w	r3, r3, #4
 800317e:	6213      	str	r3, [r2, #32]
 8003180:	e020      	b.n	80031c4 <HAL_RCC_OscConfig+0x9ac>
 8003182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003186:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	2b05      	cmp	r3, #5
 8003190:	d10c      	bne.n	80031ac <HAL_RCC_OscConfig+0x994>
 8003192:	4bb7      	ldr	r3, [pc, #732]	@ (8003470 <HAL_RCC_OscConfig+0xc58>)
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	4ab6      	ldr	r2, [pc, #728]	@ (8003470 <HAL_RCC_OscConfig+0xc58>)
 8003198:	f043 0304 	orr.w	r3, r3, #4
 800319c:	6213      	str	r3, [r2, #32]
 800319e:	4bb4      	ldr	r3, [pc, #720]	@ (8003470 <HAL_RCC_OscConfig+0xc58>)
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	4ab3      	ldr	r2, [pc, #716]	@ (8003470 <HAL_RCC_OscConfig+0xc58>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6213      	str	r3, [r2, #32]
 80031aa:	e00b      	b.n	80031c4 <HAL_RCC_OscConfig+0x9ac>
 80031ac:	4bb0      	ldr	r3, [pc, #704]	@ (8003470 <HAL_RCC_OscConfig+0xc58>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4aaf      	ldr	r2, [pc, #700]	@ (8003470 <HAL_RCC_OscConfig+0xc58>)
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	6213      	str	r3, [r2, #32]
 80031b8:	4bad      	ldr	r3, [pc, #692]	@ (8003470 <HAL_RCC_OscConfig+0xc58>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	4aac      	ldr	r2, [pc, #688]	@ (8003470 <HAL_RCC_OscConfig+0xc58>)
 80031be:	f023 0304 	bic.w	r3, r3, #4
 80031c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 8081 	beq.w	80032d8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d6:	f7fe fac1 	bl	800175c <HAL_GetTick>
 80031da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031de:	e00b      	b.n	80031f8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e0:	f7fe fabc 	bl	800175c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e345      	b.n	8003884 <HAL_RCC_OscConfig+0x106c>
 80031f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003200:	2202      	movs	r2, #2
 8003202:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003208:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	fa93 f2a3 	rbit	r2, r3
 8003212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003216:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003220:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003224:	2202      	movs	r2, #2
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800322c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	fa93 f2a3 	rbit	r2, r3
 8003236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800323e:	601a      	str	r2, [r3, #0]
  return result;
 8003240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003244:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003248:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	095b      	lsrs	r3, r3, #5
 8003252:	b2db      	uxtb	r3, r3
 8003254:	f043 0302 	orr.w	r3, r3, #2
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d102      	bne.n	8003264 <HAL_RCC_OscConfig+0xa4c>
 800325e:	4b84      	ldr	r3, [pc, #528]	@ (8003470 <HAL_RCC_OscConfig+0xc58>)
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	e013      	b.n	800328c <HAL_RCC_OscConfig+0xa74>
 8003264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003268:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800326c:	2202      	movs	r2, #2
 800326e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003274:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	fa93 f2a3 	rbit	r2, r3
 800327e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003282:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	4b79      	ldr	r3, [pc, #484]	@ (8003470 <HAL_RCC_OscConfig+0xc58>)
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003290:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003294:	2102      	movs	r1, #2
 8003296:	6011      	str	r1, [r2, #0]
 8003298:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800329c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	fa92 f1a2 	rbit	r1, r2
 80032a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032aa:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80032ae:	6011      	str	r1, [r2, #0]
  return result;
 80032b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032b4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80032b8:	6812      	ldr	r2, [r2, #0]
 80032ba:	fab2 f282 	clz	r2, r2
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	f002 021f 	and.w	r2, r2, #31
 80032ca:	2101      	movs	r1, #1
 80032cc:	fa01 f202 	lsl.w	r2, r1, r2
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d084      	beq.n	80031e0 <HAL_RCC_OscConfig+0x9c8>
 80032d6:	e07f      	b.n	80033d8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d8:	f7fe fa40 	bl	800175c <HAL_GetTick>
 80032dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e0:	e00b      	b.n	80032fa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e2:	f7fe fa3b 	bl	800175c <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e2c4      	b.n	8003884 <HAL_RCC_OscConfig+0x106c>
 80032fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fe:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003302:	2202      	movs	r2, #2
 8003304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	fa93 f2a3 	rbit	r2, r3
 8003314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003318:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003322:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003326:	2202      	movs	r2, #2
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	fa93 f2a3 	rbit	r2, r3
 8003338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003340:	601a      	str	r2, [r3, #0]
  return result;
 8003342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003346:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800334a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334c:	fab3 f383 	clz	r3, r3
 8003350:	b2db      	uxtb	r3, r3
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	b2db      	uxtb	r3, r3
 8003356:	f043 0302 	orr.w	r3, r3, #2
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d102      	bne.n	8003366 <HAL_RCC_OscConfig+0xb4e>
 8003360:	4b43      	ldr	r3, [pc, #268]	@ (8003470 <HAL_RCC_OscConfig+0xc58>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	e013      	b.n	800338e <HAL_RCC_OscConfig+0xb76>
 8003366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800336e:	2202      	movs	r2, #2
 8003370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003376:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	fa93 f2a3 	rbit	r2, r3
 8003380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003384:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	4b39      	ldr	r3, [pc, #228]	@ (8003470 <HAL_RCC_OscConfig+0xc58>)
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003392:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003396:	2102      	movs	r1, #2
 8003398:	6011      	str	r1, [r2, #0]
 800339a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800339e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	fa92 f1a2 	rbit	r1, r2
 80033a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033ac:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80033b0:	6011      	str	r1, [r2, #0]
  return result;
 80033b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033b6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	fab2 f282 	clz	r2, r2
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	f002 021f 	and.w	r2, r2, #31
 80033cc:	2101      	movs	r1, #1
 80033ce:	fa01 f202 	lsl.w	r2, r1, r2
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d184      	bne.n	80032e2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d105      	bne.n	80033ec <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e0:	4b23      	ldr	r3, [pc, #140]	@ (8003470 <HAL_RCC_OscConfig+0xc58>)
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	4a22      	ldr	r2, [pc, #136]	@ (8003470 <HAL_RCC_OscConfig+0xc58>)
 80033e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 8242 	beq.w	8003882 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003470 <HAL_RCC_OscConfig+0xc58>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b08      	cmp	r3, #8
 8003408:	f000 8213 	beq.w	8003832 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800340c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003410:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	2b02      	cmp	r3, #2
 800341a:	f040 8162 	bne.w	80036e2 <HAL_RCC_OscConfig+0xeca>
 800341e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003422:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003426:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800342a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003430:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	fa93 f2a3 	rbit	r2, r3
 800343a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003442:	601a      	str	r2, [r3, #0]
  return result;
 8003444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003448:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800344c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003458:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	461a      	mov	r2, r3
 8003460:	2300      	movs	r3, #0
 8003462:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7fe f97a 	bl	800175c <HAL_GetTick>
 8003468:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800346c:	e00c      	b.n	8003488 <HAL_RCC_OscConfig+0xc70>
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003474:	f7fe f972 	bl	800175c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e1fd      	b.n	8003884 <HAL_RCC_OscConfig+0x106c>
 8003488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800348c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003490:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003494:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800349a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	fa93 f2a3 	rbit	r2, r3
 80034a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80034ac:	601a      	str	r2, [r3, #0]
  return result;
 80034ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80034b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b8:	fab3 f383 	clz	r3, r3
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d102      	bne.n	80034d2 <HAL_RCC_OscConfig+0xcba>
 80034cc:	4bb0      	ldr	r3, [pc, #704]	@ (8003790 <HAL_RCC_OscConfig+0xf78>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	e027      	b.n	8003522 <HAL_RCC_OscConfig+0xd0a>
 80034d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80034da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	fa93 f2a3 	rbit	r2, r3
 80034ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003500:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	fa93 f2a3 	rbit	r2, r3
 8003514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003518:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	4b9c      	ldr	r3, [pc, #624]	@ (8003790 <HAL_RCC_OscConfig+0xf78>)
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003526:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800352a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800352e:	6011      	str	r1, [r2, #0]
 8003530:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003534:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	fa92 f1a2 	rbit	r1, r2
 800353e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003542:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003546:	6011      	str	r1, [r2, #0]
  return result;
 8003548:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800354c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	fab2 f282 	clz	r2, r2
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	f042 0220 	orr.w	r2, r2, #32
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	f002 021f 	and.w	r2, r2, #31
 8003562:	2101      	movs	r1, #1
 8003564:	fa01 f202 	lsl.w	r2, r1, r2
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d182      	bne.n	8003474 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800356e:	4b88      	ldr	r3, [pc, #544]	@ (8003790 <HAL_RCC_OscConfig+0xf78>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003576:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800357a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003586:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	430b      	orrs	r3, r1
 8003590:	497f      	ldr	r1, [pc, #508]	@ (8003790 <HAL_RCC_OscConfig+0xf78>)
 8003592:	4313      	orrs	r3, r2
 8003594:	604b      	str	r3, [r1, #4]
 8003596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800359a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800359e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80035a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	fa93 f2a3 	rbit	r2, r3
 80035b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80035ba:	601a      	str	r2, [r3, #0]
  return result;
 80035bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80035c4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c6:	fab3 f383 	clz	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80035d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	461a      	mov	r2, r3
 80035d8:	2301      	movs	r3, #1
 80035da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035dc:	f7fe f8be 	bl	800175c <HAL_GetTick>
 80035e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e4:	e009      	b.n	80035fa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e6:	f7fe f8b9 	bl	800175c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e144      	b.n	8003884 <HAL_RCC_OscConfig+0x106c>
 80035fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fe:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003602:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003606:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800360c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	fa93 f2a3 	rbit	r2, r3
 8003616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800361a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800361e:	601a      	str	r2, [r3, #0]
  return result;
 8003620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003624:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003628:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800362a:	fab3 f383 	clz	r3, r3
 800362e:	b2db      	uxtb	r3, r3
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f043 0301 	orr.w	r3, r3, #1
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b01      	cmp	r3, #1
 800363c:	d102      	bne.n	8003644 <HAL_RCC_OscConfig+0xe2c>
 800363e:	4b54      	ldr	r3, [pc, #336]	@ (8003790 <HAL_RCC_OscConfig+0xf78>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	e027      	b.n	8003694 <HAL_RCC_OscConfig+0xe7c>
 8003644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003648:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800364c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003650:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003656:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	fa93 f2a3 	rbit	r2, r3
 8003660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003664:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800366e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003672:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800367c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	fa93 f2a3 	rbit	r2, r3
 8003686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	4b3f      	ldr	r3, [pc, #252]	@ (8003790 <HAL_RCC_OscConfig+0xf78>)
 8003692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003694:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003698:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800369c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80036a0:	6011      	str	r1, [r2, #0]
 80036a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036a6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	fa92 f1a2 	rbit	r1, r2
 80036b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036b4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80036b8:	6011      	str	r1, [r2, #0]
  return result;
 80036ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036be:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	fab2 f282 	clz	r2, r2
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	f042 0220 	orr.w	r2, r2, #32
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	f002 021f 	and.w	r2, r2, #31
 80036d4:	2101      	movs	r1, #1
 80036d6:	fa01 f202 	lsl.w	r2, r1, r2
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d082      	beq.n	80035e6 <HAL_RCC_OscConfig+0xdce>
 80036e0:	e0cf      	b.n	8003882 <HAL_RCC_OscConfig+0x106a>
 80036e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80036ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	fa93 f2a3 	rbit	r2, r3
 80036fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003702:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003706:	601a      	str	r2, [r3, #0]
  return result;
 8003708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800370c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003710:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003712:	fab3 f383 	clz	r3, r3
 8003716:	b2db      	uxtb	r3, r3
 8003718:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800371c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	461a      	mov	r2, r3
 8003724:	2300      	movs	r3, #0
 8003726:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7fe f818 	bl	800175c <HAL_GetTick>
 800372c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003730:	e009      	b.n	8003746 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003732:	f7fe f813 	bl	800175c <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e09e      	b.n	8003884 <HAL_RCC_OscConfig+0x106c>
 8003746:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800374a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800374e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003758:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	fa93 f2a3 	rbit	r2, r3
 8003762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003766:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800376a:	601a      	str	r2, [r3, #0]
  return result;
 800376c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003770:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003774:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	095b      	lsrs	r3, r3, #5
 800377e:	b2db      	uxtb	r3, r3
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b01      	cmp	r3, #1
 8003788:	d104      	bne.n	8003794 <HAL_RCC_OscConfig+0xf7c>
 800378a:	4b01      	ldr	r3, [pc, #4]	@ (8003790 <HAL_RCC_OscConfig+0xf78>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	e029      	b.n	80037e4 <HAL_RCC_OscConfig+0xfcc>
 8003790:	40021000 	.word	0x40021000
 8003794:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003798:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800379c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	fa93 f2a3 	rbit	r2, r3
 80037b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037be:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80037c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037cc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	fa93 f2a3 	rbit	r2, r3
 80037d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037da:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003890 <HAL_RCC_OscConfig+0x1078>)
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037e8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80037ec:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80037f0:	6011      	str	r1, [r2, #0]
 80037f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037f6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	fa92 f1a2 	rbit	r1, r2
 8003800:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003804:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003808:	6011      	str	r1, [r2, #0]
  return result;
 800380a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800380e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	fab2 f282 	clz	r2, r2
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	f042 0220 	orr.w	r2, r2, #32
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	f002 021f 	and.w	r2, r2, #31
 8003824:	2101      	movs	r1, #1
 8003826:	fa01 f202 	lsl.w	r2, r1, r2
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d180      	bne.n	8003732 <HAL_RCC_OscConfig+0xf1a>
 8003830:	e027      	b.n	8003882 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003836:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e01e      	b.n	8003884 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003846:	4b12      	ldr	r3, [pc, #72]	@ (8003890 <HAL_RCC_OscConfig+0x1078>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800384e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003852:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800385a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	429a      	cmp	r2, r3
 8003864:	d10b      	bne.n	800387e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003866:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800386a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800386e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003872:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800387a:	429a      	cmp	r2, r3
 800387c:	d001      	beq.n	8003882 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000

08003894 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b09e      	sub	sp, #120	@ 0x78
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e162      	b.n	8003b72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038ac:	4b90      	ldr	r3, [pc, #576]	@ (8003af0 <HAL_RCC_ClockConfig+0x25c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d910      	bls.n	80038dc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	4b8d      	ldr	r3, [pc, #564]	@ (8003af0 <HAL_RCC_ClockConfig+0x25c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f023 0207 	bic.w	r2, r3, #7
 80038c2:	498b      	ldr	r1, [pc, #556]	@ (8003af0 <HAL_RCC_ClockConfig+0x25c>)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ca:	4b89      	ldr	r3, [pc, #548]	@ (8003af0 <HAL_RCC_ClockConfig+0x25c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e14a      	b.n	8003b72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e8:	4b82      	ldr	r3, [pc, #520]	@ (8003af4 <HAL_RCC_ClockConfig+0x260>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	497f      	ldr	r1, [pc, #508]	@ (8003af4 <HAL_RCC_ClockConfig+0x260>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 80dc 	beq.w	8003ac0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d13c      	bne.n	800398a <HAL_RCC_ClockConfig+0xf6>
 8003910:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003914:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003918:	fa93 f3a3 	rbit	r3, r3
 800391c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800391e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003920:	fab3 f383 	clz	r3, r3
 8003924:	b2db      	uxtb	r3, r3
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	d102      	bne.n	800393a <HAL_RCC_ClockConfig+0xa6>
 8003934:	4b6f      	ldr	r3, [pc, #444]	@ (8003af4 <HAL_RCC_ClockConfig+0x260>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	e00f      	b.n	800395a <HAL_RCC_ClockConfig+0xc6>
 800393a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800393e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003940:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003942:	fa93 f3a3 	rbit	r3, r3
 8003946:	667b      	str	r3, [r7, #100]	@ 0x64
 8003948:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800394c:	663b      	str	r3, [r7, #96]	@ 0x60
 800394e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003950:	fa93 f3a3 	rbit	r3, r3
 8003954:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003956:	4b67      	ldr	r3, [pc, #412]	@ (8003af4 <HAL_RCC_ClockConfig+0x260>)
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800395e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003960:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003962:	fa92 f2a2 	rbit	r2, r2
 8003966:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003968:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800396a:	fab2 f282 	clz	r2, r2
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	f042 0220 	orr.w	r2, r2, #32
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	f002 021f 	and.w	r2, r2, #31
 800397a:	2101      	movs	r1, #1
 800397c:	fa01 f202 	lsl.w	r2, r1, r2
 8003980:	4013      	ands	r3, r2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d17b      	bne.n	8003a7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e0f3      	b.n	8003b72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d13c      	bne.n	8003a0c <HAL_RCC_ClockConfig+0x178>
 8003992:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003996:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800399a:	fa93 f3a3 	rbit	r3, r3
 800399e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80039a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d102      	bne.n	80039bc <HAL_RCC_ClockConfig+0x128>
 80039b6:	4b4f      	ldr	r3, [pc, #316]	@ (8003af4 <HAL_RCC_ClockConfig+0x260>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	e00f      	b.n	80039dc <HAL_RCC_ClockConfig+0x148>
 80039bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039c4:	fa93 f3a3 	rbit	r3, r3
 80039c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80039d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039d2:	fa93 f3a3 	rbit	r3, r3
 80039d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039d8:	4b46      	ldr	r3, [pc, #280]	@ (8003af4 <HAL_RCC_ClockConfig+0x260>)
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039e0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80039e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80039e4:	fa92 f2a2 	rbit	r2, r2
 80039e8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80039ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039ec:	fab2 f282 	clz	r2, r2
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	f042 0220 	orr.w	r2, r2, #32
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	f002 021f 	and.w	r2, r2, #31
 80039fc:	2101      	movs	r1, #1
 80039fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003a02:	4013      	ands	r3, r2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d13a      	bne.n	8003a7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0b2      	b.n	8003b72 <HAL_RCC_ClockConfig+0x2de>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a12:	fa93 f3a3 	rbit	r3, r3
 8003a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1a:	fab3 f383 	clz	r3, r3
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d102      	bne.n	8003a34 <HAL_RCC_ClockConfig+0x1a0>
 8003a2e:	4b31      	ldr	r3, [pc, #196]	@ (8003af4 <HAL_RCC_ClockConfig+0x260>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	e00d      	b.n	8003a50 <HAL_RCC_ClockConfig+0x1bc>
 8003a34:	2302      	movs	r3, #2
 8003a36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3a:	fa93 f3a3 	rbit	r3, r3
 8003a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a40:	2302      	movs	r3, #2
 8003a42:	623b      	str	r3, [r7, #32]
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	fa93 f3a3 	rbit	r3, r3
 8003a4a:	61fb      	str	r3, [r7, #28]
 8003a4c:	4b29      	ldr	r3, [pc, #164]	@ (8003af4 <HAL_RCC_ClockConfig+0x260>)
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a50:	2202      	movs	r2, #2
 8003a52:	61ba      	str	r2, [r7, #24]
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	fa92 f2a2 	rbit	r2, r2
 8003a5a:	617a      	str	r2, [r7, #20]
  return result;
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	fab2 f282 	clz	r2, r2
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	f042 0220 	orr.w	r2, r2, #32
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	f002 021f 	and.w	r2, r2, #31
 8003a6e:	2101      	movs	r1, #1
 8003a70:	fa01 f202 	lsl.w	r2, r1, r2
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e079      	b.n	8003b72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003af4 <HAL_RCC_ClockConfig+0x260>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f023 0203 	bic.w	r2, r3, #3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	491a      	ldr	r1, [pc, #104]	@ (8003af4 <HAL_RCC_ClockConfig+0x260>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a90:	f7fd fe64 	bl	800175c <HAL_GetTick>
 8003a94:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a98:	f7fd fe60 	bl	800175c <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e061      	b.n	8003b72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	4b11      	ldr	r3, [pc, #68]	@ (8003af4 <HAL_RCC_ClockConfig+0x260>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f003 020c 	and.w	r2, r3, #12
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d1eb      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8003af0 <HAL_RCC_ClockConfig+0x25c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d214      	bcs.n	8003af8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ace:	4b08      	ldr	r3, [pc, #32]	@ (8003af0 <HAL_RCC_ClockConfig+0x25c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 0207 	bic.w	r2, r3, #7
 8003ad6:	4906      	ldr	r1, [pc, #24]	@ (8003af0 <HAL_RCC_ClockConfig+0x25c>)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ade:	4b04      	ldr	r3, [pc, #16]	@ (8003af0 <HAL_RCC_ClockConfig+0x25c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e040      	b.n	8003b72 <HAL_RCC_ClockConfig+0x2de>
 8003af0:	40022000 	.word	0x40022000
 8003af4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b04:	4b1d      	ldr	r3, [pc, #116]	@ (8003b7c <HAL_RCC_ClockConfig+0x2e8>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	491a      	ldr	r1, [pc, #104]	@ (8003b7c <HAL_RCC_ClockConfig+0x2e8>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d009      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b22:	4b16      	ldr	r3, [pc, #88]	@ (8003b7c <HAL_RCC_ClockConfig+0x2e8>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4912      	ldr	r1, [pc, #72]	@ (8003b7c <HAL_RCC_ClockConfig+0x2e8>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b36:	f000 f829 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 8003b3a:	4601      	mov	r1, r0
 8003b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b7c <HAL_RCC_ClockConfig+0x2e8>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b44:	22f0      	movs	r2, #240	@ 0xf0
 8003b46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	fa92 f2a2 	rbit	r2, r2
 8003b4e:	60fa      	str	r2, [r7, #12]
  return result;
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	fab2 f282 	clz	r2, r2
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	40d3      	lsrs	r3, r2
 8003b5a:	4a09      	ldr	r2, [pc, #36]	@ (8003b80 <HAL_RCC_ClockConfig+0x2ec>)
 8003b5c:	5cd3      	ldrb	r3, [r2, r3]
 8003b5e:	fa21 f303 	lsr.w	r3, r1, r3
 8003b62:	4a08      	ldr	r2, [pc, #32]	@ (8003b84 <HAL_RCC_ClockConfig+0x2f0>)
 8003b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b66:	4b08      	ldr	r3, [pc, #32]	@ (8003b88 <HAL_RCC_ClockConfig+0x2f4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fd fdb2 	bl	80016d4 <HAL_InitTick>
  
  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3778      	adds	r7, #120	@ 0x78
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	08006f18 	.word	0x08006f18
 8003b84:	20000008 	.word	0x20000008
 8003b88:	2000000c 	.word	0x2000000c

08003b8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b08b      	sub	sp, #44	@ 0x2c
 8003b90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
 8003b96:	2300      	movs	r3, #0
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003ba6:	4b29      	ldr	r3, [pc, #164]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d002      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x30>
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d003      	beq.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x36>
 8003bba:	e03c      	b.n	8003c36 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bbc:	4b24      	ldr	r3, [pc, #144]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bbe:	623b      	str	r3, [r7, #32]
      break;
 8003bc0:	e03c      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003bc8:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003bcc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	fa92 f2a2 	rbit	r2, r2
 8003bd4:	607a      	str	r2, [r7, #4]
  return result;
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	fab2 f282 	clz	r2, r2
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	40d3      	lsrs	r3, r2
 8003be0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003be2:	5cd3      	ldrb	r3, [r2, r3]
 8003be4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003be6:	4b19      	ldr	r3, [pc, #100]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	220f      	movs	r2, #15
 8003bf0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	fa92 f2a2 	rbit	r2, r2
 8003bf8:	60fa      	str	r2, [r7, #12]
  return result;
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	fab2 f282 	clz	r2, r2
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	40d3      	lsrs	r3, r2
 8003c04:	4a14      	ldr	r2, [pc, #80]	@ (8003c58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c06:	5cd3      	ldrb	r3, [r2, r3]
 8003c08:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c14:	4a0e      	ldr	r2, [pc, #56]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c24:	e004      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	4a0c      	ldr	r2, [pc, #48]	@ (8003c5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c32:	623b      	str	r3, [r7, #32]
      break;
 8003c34:	e002      	b.n	8003c3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c36:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c38:	623b      	str	r3, [r7, #32]
      break;
 8003c3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	372c      	adds	r7, #44	@ 0x2c
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	007a1200 	.word	0x007a1200
 8003c54:	08006f30 	.word	0x08006f30
 8003c58:	08006f40 	.word	0x08006f40
 8003c5c:	003d0900 	.word	0x003d0900

08003c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c64:	4b03      	ldr	r3, [pc, #12]	@ (8003c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c66:	681b      	ldr	r3, [r3, #0]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20000008 	.word	0x20000008

08003c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003c7e:	f7ff ffef 	bl	8003c60 <HAL_RCC_GetHCLKFreq>
 8003c82:	4601      	mov	r1, r0
 8003c84:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c8c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003c90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	fa92 f2a2 	rbit	r2, r2
 8003c98:	603a      	str	r2, [r7, #0]
  return result;
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	fab2 f282 	clz	r2, r2
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	40d3      	lsrs	r3, r2
 8003ca4:	4a04      	ldr	r2, [pc, #16]	@ (8003cb8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003ca6:	5cd3      	ldrb	r3, [r2, r3]
 8003ca8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	08006f28 	.word	0x08006f28

08003cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003cc2:	f7ff ffcd 	bl	8003c60 <HAL_RCC_GetHCLKFreq>
 8003cc6:	4601      	mov	r1, r0
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003cd0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003cd4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	fa92 f2a2 	rbit	r2, r2
 8003cdc:	603a      	str	r2, [r7, #0]
  return result;
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	fab2 f282 	clz	r2, r2
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	40d3      	lsrs	r3, r2
 8003ce8:	4a04      	ldr	r2, [pc, #16]	@ (8003cfc <HAL_RCC_GetPCLK2Freq+0x40>)
 8003cea:	5cd3      	ldrb	r3, [r2, r3]
 8003cec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	08006f28 	.word	0x08006f28

08003d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b092      	sub	sp, #72	@ 0x48
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d10:	2300      	movs	r3, #0
 8003d12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 80d4 	beq.w	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d24:	4b4e      	ldr	r3, [pc, #312]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10e      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d30:	4b4b      	ldr	r3, [pc, #300]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	4a4a      	ldr	r2, [pc, #296]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d3a:	61d3      	str	r3, [r2, #28]
 8003d3c:	4b48      	ldr	r3, [pc, #288]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4e:	4b45      	ldr	r3, [pc, #276]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d118      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d5a:	4b42      	ldr	r3, [pc, #264]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a41      	ldr	r2, [pc, #260]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d66:	f7fd fcf9 	bl	800175c <HAL_GetTick>
 8003d6a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6c:	e008      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6e:	f7fd fcf5 	bl	800175c <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b64      	cmp	r3, #100	@ 0x64
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e13c      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d80:	4b38      	ldr	r3, [pc, #224]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d8c:	4b34      	ldr	r3, [pc, #208]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8084 	beq.w	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003da6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d07c      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dac:	4b2c      	ldr	r3, [pc, #176]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003db6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003dba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbe:	fa93 f3a3 	rbit	r3, r3
 8003dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dc6:	fab3 f383 	clz	r3, r3
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	4b26      	ldr	r3, [pc, #152]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003dde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de2:	fa93 f3a3 	rbit	r3, r3
 8003de6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dea:	fab3 f383 	clz	r3, r3
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	4b1d      	ldr	r3, [pc, #116]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dfe:	4a18      	ldr	r2, [pc, #96]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e02:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d04b      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0e:	f7fd fca5 	bl	800175c <HAL_GetTick>
 8003e12:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e14:	e00a      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e16:	f7fd fca1 	bl	800175c <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e0e6      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e32:	fa93 f3a3 	rbit	r3, r3
 8003e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e38:	2302      	movs	r3, #2
 8003e3a:	623b      	str	r3, [r7, #32]
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	fa93 f3a3 	rbit	r3, r3
 8003e42:	61fb      	str	r3, [r7, #28]
  return result;
 8003e44:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e46:	fab3 f383 	clz	r3, r3
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f043 0302 	orr.w	r3, r3, #2
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d108      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003e5a:	4b01      	ldr	r3, [pc, #4]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	e00d      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40007000 	.word	0x40007000
 8003e68:	10908100 	.word	0x10908100
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	fa93 f3a3 	rbit	r3, r3
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	4b62      	ldr	r3, [pc, #392]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	613a      	str	r2, [r7, #16]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	fa92 f2a2 	rbit	r2, r2
 8003e86:	60fa      	str	r2, [r7, #12]
  return result;
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	fab2 f282 	clz	r2, r2
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	f002 021f 	and.w	r2, r2, #31
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0b7      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003ea6:	4b57      	ldr	r3, [pc, #348]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4954      	ldr	r1, [pc, #336]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003eb8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d105      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec0:	4b50      	ldr	r3, [pc, #320]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	4a4f      	ldr	r2, [pc, #316]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ec6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ed8:	4b4a      	ldr	r3, [pc, #296]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003edc:	f023 0203 	bic.w	r2, r3, #3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4947      	ldr	r1, [pc, #284]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d008      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ef6:	4b43      	ldr	r3, [pc, #268]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efa:	f023 0210 	bic.w	r2, r3, #16
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	4940      	ldr	r1, [pc, #256]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	630b      	str	r3, [r1, #48]	@ 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f14:	4b3b      	ldr	r3, [pc, #236]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f18:	f023 0220 	bic.w	r2, r3, #32
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	4938      	ldr	r1, [pc, #224]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f32:	4b34      	ldr	r3, [pc, #208]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f36:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	4931      	ldr	r1, [pc, #196]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f50:	4b2c      	ldr	r3, [pc, #176]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	4929      	ldr	r1, [pc, #164]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d008      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003f6e:	4b25      	ldr	r3, [pc, #148]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f72:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	4922      	ldr	r1, [pc, #136]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	491a      	ldr	r1, [pc, #104]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d008      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003faa:	4b16      	ldr	r3, [pc, #88]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	4913      	ldr	r1, [pc, #76]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fcc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd4:	490b      	ldr	r1, [pc, #44]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003fe6:	4b07      	ldr	r3, [pc, #28]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fea:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff2:	4904      	ldr	r1, [pc, #16]	@ (8004004 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3748      	adds	r7, #72	@ 0x48
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40021000 	.word	0x40021000

08004008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e049      	b.n	80040ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fd f9f2 	bl	8001418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3304      	adds	r3, #4
 8004044:	4619      	mov	r1, r3
 8004046:	4610      	mov	r0, r2
 8004048:	f000 fcb4 	bl	80049b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e049      	b.n	800415c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d106      	bne.n	80040e2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f841 	bl	8004164 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2202      	movs	r2, #2
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3304      	adds	r3, #4
 80040f2:	4619      	mov	r1, r3
 80040f4:	4610      	mov	r0, r2
 80040f6:	f000 fc5d 	bl	80049b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d104      	bne.n	8004196 <HAL_TIM_IC_Start_IT+0x1e>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004192:	b2db      	uxtb	r3, r3
 8004194:	e023      	b.n	80041de <HAL_TIM_IC_Start_IT+0x66>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b04      	cmp	r3, #4
 800419a:	d104      	bne.n	80041a6 <HAL_TIM_IC_Start_IT+0x2e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	e01b      	b.n	80041de <HAL_TIM_IC_Start_IT+0x66>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d104      	bne.n	80041b6 <HAL_TIM_IC_Start_IT+0x3e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	e013      	b.n	80041de <HAL_TIM_IC_Start_IT+0x66>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b0c      	cmp	r3, #12
 80041ba:	d104      	bne.n	80041c6 <HAL_TIM_IC_Start_IT+0x4e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	e00b      	b.n	80041de <HAL_TIM_IC_Start_IT+0x66>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	d104      	bne.n	80041d6 <HAL_TIM_IC_Start_IT+0x5e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	e003      	b.n	80041de <HAL_TIM_IC_Start_IT+0x66>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d104      	bne.n	80041f0 <HAL_TIM_IC_Start_IT+0x78>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	e013      	b.n	8004218 <HAL_TIM_IC_Start_IT+0xa0>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d104      	bne.n	8004200 <HAL_TIM_IC_Start_IT+0x88>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	e00b      	b.n	8004218 <HAL_TIM_IC_Start_IT+0xa0>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2b08      	cmp	r3, #8
 8004204:	d104      	bne.n	8004210 <HAL_TIM_IC_Start_IT+0x98>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800420c:	b2db      	uxtb	r3, r3
 800420e:	e003      	b.n	8004218 <HAL_TIM_IC_Start_IT+0xa0>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004216:	b2db      	uxtb	r3, r3
 8004218:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800421a:	7bbb      	ldrb	r3, [r7, #14]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d102      	bne.n	8004226 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004220:	7b7b      	ldrb	r3, [r7, #13]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d001      	beq.n	800422a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e0c9      	b.n	80043be <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d104      	bne.n	800423a <HAL_TIM_IC_Start_IT+0xc2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004238:	e023      	b.n	8004282 <HAL_TIM_IC_Start_IT+0x10a>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b04      	cmp	r3, #4
 800423e:	d104      	bne.n	800424a <HAL_TIM_IC_Start_IT+0xd2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004248:	e01b      	b.n	8004282 <HAL_TIM_IC_Start_IT+0x10a>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b08      	cmp	r3, #8
 800424e:	d104      	bne.n	800425a <HAL_TIM_IC_Start_IT+0xe2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004258:	e013      	b.n	8004282 <HAL_TIM_IC_Start_IT+0x10a>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b0c      	cmp	r3, #12
 800425e:	d104      	bne.n	800426a <HAL_TIM_IC_Start_IT+0xf2>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004268:	e00b      	b.n	8004282 <HAL_TIM_IC_Start_IT+0x10a>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b10      	cmp	r3, #16
 800426e:	d104      	bne.n	800427a <HAL_TIM_IC_Start_IT+0x102>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004278:	e003      	b.n	8004282 <HAL_TIM_IC_Start_IT+0x10a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d104      	bne.n	8004292 <HAL_TIM_IC_Start_IT+0x11a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004290:	e013      	b.n	80042ba <HAL_TIM_IC_Start_IT+0x142>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b04      	cmp	r3, #4
 8004296:	d104      	bne.n	80042a2 <HAL_TIM_IC_Start_IT+0x12a>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042a0:	e00b      	b.n	80042ba <HAL_TIM_IC_Start_IT+0x142>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d104      	bne.n	80042b2 <HAL_TIM_IC_Start_IT+0x13a>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042b0:	e003      	b.n	80042ba <HAL_TIM_IC_Start_IT+0x142>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2202      	movs	r2, #2
 80042b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b0c      	cmp	r3, #12
 80042be:	d841      	bhi.n	8004344 <HAL_TIM_IC_Start_IT+0x1cc>
 80042c0:	a201      	add	r2, pc, #4	@ (adr r2, 80042c8 <HAL_TIM_IC_Start_IT+0x150>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	080042fd 	.word	0x080042fd
 80042cc:	08004345 	.word	0x08004345
 80042d0:	08004345 	.word	0x08004345
 80042d4:	08004345 	.word	0x08004345
 80042d8:	0800430f 	.word	0x0800430f
 80042dc:	08004345 	.word	0x08004345
 80042e0:	08004345 	.word	0x08004345
 80042e4:	08004345 	.word	0x08004345
 80042e8:	08004321 	.word	0x08004321
 80042ec:	08004345 	.word	0x08004345
 80042f0:	08004345 	.word	0x08004345
 80042f4:	08004345 	.word	0x08004345
 80042f8:	08004333 	.word	0x08004333
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0202 	orr.w	r2, r2, #2
 800430a:	60da      	str	r2, [r3, #12]
      break;
 800430c:	e01d      	b.n	800434a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0204 	orr.w	r2, r2, #4
 800431c:	60da      	str	r2, [r3, #12]
      break;
 800431e:	e014      	b.n	800434a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0208 	orr.w	r2, r2, #8
 800432e:	60da      	str	r2, [r3, #12]
      break;
 8004330:	e00b      	b.n	800434a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0210 	orr.w	r2, r2, #16
 8004340:	60da      	str	r2, [r3, #12]
      break;
 8004342:	e002      	b.n	800434a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	73fb      	strb	r3, [r7, #15]
      break;
 8004348:	bf00      	nop
  }

  if (status == HAL_OK)
 800434a:	7bfb      	ldrb	r3, [r7, #15]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d135      	bne.n	80043bc <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2201      	movs	r2, #1
 8004356:	6839      	ldr	r1, [r7, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f000 fd3f 	bl	8004ddc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a19      	ldr	r2, [pc, #100]	@ (80043c8 <HAL_TIM_IC_Start_IT+0x250>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d009      	beq.n	800437c <HAL_TIM_IC_Start_IT+0x204>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004370:	d004      	beq.n	800437c <HAL_TIM_IC_Start_IT+0x204>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a15      	ldr	r2, [pc, #84]	@ (80043cc <HAL_TIM_IC_Start_IT+0x254>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d115      	bne.n	80043a8 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	4b13      	ldr	r3, [pc, #76]	@ (80043d0 <HAL_TIM_IC_Start_IT+0x258>)
 8004384:	4013      	ands	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b06      	cmp	r3, #6
 800438c:	d015      	beq.n	80043ba <HAL_TIM_IC_Start_IT+0x242>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004394:	d011      	beq.n	80043ba <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0201 	orr.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a6:	e008      	b.n	80043ba <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	e000      	b.n	80043bc <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ba:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40012c00 	.word	0x40012c00
 80043cc:	40014000 	.word	0x40014000
 80043d0:	00010007 	.word	0x00010007

080043d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d122      	bne.n	8004430 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d11b      	bne.n	8004430 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0202 	mvn.w	r2, #2
 8004400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fc fc12 	bl	8000c40 <HAL_TIM_IC_CaptureCallback>
 800441c:	e005      	b.n	800442a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 faaa 	bl	8004978 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fab1 	bl	800498c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b04      	cmp	r3, #4
 800443c:	d122      	bne.n	8004484 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b04      	cmp	r3, #4
 800444a:	d11b      	bne.n	8004484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0204 	mvn.w	r2, #4
 8004454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7fc fbe8 	bl	8000c40 <HAL_TIM_IC_CaptureCallback>
 8004470:	e005      	b.n	800447e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fa80 	bl	8004978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fa87 	bl	800498c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b08      	cmp	r3, #8
 8004490:	d122      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b08      	cmp	r3, #8
 800449e:	d11b      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0208 	mvn.w	r2, #8
 80044a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2204      	movs	r2, #4
 80044ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fc fbbe 	bl	8000c40 <HAL_TIM_IC_CaptureCallback>
 80044c4:	e005      	b.n	80044d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fa56 	bl	8004978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fa5d 	bl	800498c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2b10      	cmp	r3, #16
 80044e4:	d122      	bne.n	800452c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b10      	cmp	r3, #16
 80044f2:	d11b      	bne.n	800452c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0210 	mvn.w	r2, #16
 80044fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2208      	movs	r2, #8
 8004502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7fc fb94 	bl	8000c40 <HAL_TIM_IC_CaptureCallback>
 8004518:	e005      	b.n	8004526 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fa2c 	bl	8004978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fa33 	bl	800498c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b01      	cmp	r3, #1
 8004538:	d10e      	bne.n	8004558 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b01      	cmp	r3, #1
 8004546:	d107      	bne.n	8004558 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0201 	mvn.w	r2, #1
 8004550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fa06 	bl	8004964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004562:	2b80      	cmp	r3, #128	@ 0x80
 8004564:	d10e      	bne.n	8004584 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004570:	2b80      	cmp	r3, #128	@ 0x80
 8004572:	d107      	bne.n	8004584 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800457c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fcc2 	bl	8004f08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004592:	d10e      	bne.n	80045b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459e:	2b80      	cmp	r3, #128	@ 0x80
 80045a0:	d107      	bne.n	80045b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80045aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fcb5 	bl	8004f1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045bc:	2b40      	cmp	r3, #64	@ 0x40
 80045be:	d10e      	bne.n	80045de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ca:	2b40      	cmp	r3, #64	@ 0x40
 80045cc:	d107      	bne.n	80045de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f9e1 	bl	80049a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d10e      	bne.n	800460a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d107      	bne.n	800460a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f06f 0220 	mvn.w	r2, #32
 8004602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 fc75 	bl	8004ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b086      	sub	sp, #24
 8004616:	af00      	add	r7, sp, #0
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_TIM_IC_ConfigChannel+0x1e>
 800462c:	2302      	movs	r3, #2
 800462e:	e088      	b.n	8004742 <HAL_TIM_IC_ConfigChannel+0x130>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d11b      	bne.n	8004676 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800464e:	f000 fa1f 	bl	8004a90 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699a      	ldr	r2, [r3, #24]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 020c 	bic.w	r2, r2, #12
 8004660:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6999      	ldr	r1, [r3, #24]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	619a      	str	r2, [r3, #24]
 8004674:	e060      	b.n	8004738 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b04      	cmp	r3, #4
 800467a:	d11c      	bne.n	80046b6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800468c:	f000 fa85 	bl	8004b9a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699a      	ldr	r2, [r3, #24]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800469e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6999      	ldr	r1, [r3, #24]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	021a      	lsls	r2, r3, #8
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	619a      	str	r2, [r3, #24]
 80046b4:	e040      	b.n	8004738 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d11b      	bne.n	80046f4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80046cc:	f000 fad2 	bl	8004c74 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	69da      	ldr	r2, [r3, #28]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 020c 	bic.w	r2, r2, #12
 80046de:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	69d9      	ldr	r1, [r3, #28]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	61da      	str	r2, [r3, #28]
 80046f2:	e021      	b.n	8004738 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b0c      	cmp	r3, #12
 80046f8:	d11c      	bne.n	8004734 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800470a:	f000 faef 	bl	8004cec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800471c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69d9      	ldr	r1, [r3, #28]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	021a      	lsls	r2, r3, #8
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	61da      	str	r2, [r3, #28]
 8004732:	e001      	b.n	8004738 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004740:	7dfb      	ldrb	r3, [r7, #23]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b084      	sub	sp, #16
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <HAL_TIM_ConfigClockSource+0x1c>
 8004762:	2302      	movs	r3, #2
 8004764:	e0b6      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x18a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004784:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004788:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004790:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047a2:	d03e      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0xd8>
 80047a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047a8:	f200 8087 	bhi.w	80048ba <HAL_TIM_ConfigClockSource+0x170>
 80047ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047b0:	f000 8086 	beq.w	80048c0 <HAL_TIM_ConfigClockSource+0x176>
 80047b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047b8:	d87f      	bhi.n	80048ba <HAL_TIM_ConfigClockSource+0x170>
 80047ba:	2b70      	cmp	r3, #112	@ 0x70
 80047bc:	d01a      	beq.n	80047f4 <HAL_TIM_ConfigClockSource+0xaa>
 80047be:	2b70      	cmp	r3, #112	@ 0x70
 80047c0:	d87b      	bhi.n	80048ba <HAL_TIM_ConfigClockSource+0x170>
 80047c2:	2b60      	cmp	r3, #96	@ 0x60
 80047c4:	d050      	beq.n	8004868 <HAL_TIM_ConfigClockSource+0x11e>
 80047c6:	2b60      	cmp	r3, #96	@ 0x60
 80047c8:	d877      	bhi.n	80048ba <HAL_TIM_ConfigClockSource+0x170>
 80047ca:	2b50      	cmp	r3, #80	@ 0x50
 80047cc:	d03c      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0xfe>
 80047ce:	2b50      	cmp	r3, #80	@ 0x50
 80047d0:	d873      	bhi.n	80048ba <HAL_TIM_ConfigClockSource+0x170>
 80047d2:	2b40      	cmp	r3, #64	@ 0x40
 80047d4:	d058      	beq.n	8004888 <HAL_TIM_ConfigClockSource+0x13e>
 80047d6:	2b40      	cmp	r3, #64	@ 0x40
 80047d8:	d86f      	bhi.n	80048ba <HAL_TIM_ConfigClockSource+0x170>
 80047da:	2b30      	cmp	r3, #48	@ 0x30
 80047dc:	d064      	beq.n	80048a8 <HAL_TIM_ConfigClockSource+0x15e>
 80047de:	2b30      	cmp	r3, #48	@ 0x30
 80047e0:	d86b      	bhi.n	80048ba <HAL_TIM_ConfigClockSource+0x170>
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	d060      	beq.n	80048a8 <HAL_TIM_ConfigClockSource+0x15e>
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	d867      	bhi.n	80048ba <HAL_TIM_ConfigClockSource+0x170>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d05c      	beq.n	80048a8 <HAL_TIM_ConfigClockSource+0x15e>
 80047ee:	2b10      	cmp	r3, #16
 80047f0:	d05a      	beq.n	80048a8 <HAL_TIM_ConfigClockSource+0x15e>
 80047f2:	e062      	b.n	80048ba <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004804:	f000 faca 	bl	8004d9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004816:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	609a      	str	r2, [r3, #8]
      break;
 8004820:	e04f      	b.n	80048c2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004832:	f000 fab3 	bl	8004d9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004844:	609a      	str	r2, [r3, #8]
      break;
 8004846:	e03c      	b.n	80048c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004854:	461a      	mov	r2, r3
 8004856:	f000 f971 	bl	8004b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2150      	movs	r1, #80	@ 0x50
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fa80 	bl	8004d66 <TIM_ITRx_SetConfig>
      break;
 8004866:	e02c      	b.n	80048c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004874:	461a      	mov	r2, r3
 8004876:	f000 f9cd 	bl	8004c14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2160      	movs	r1, #96	@ 0x60
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fa70 	bl	8004d66 <TIM_ITRx_SetConfig>
      break;
 8004886:	e01c      	b.n	80048c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004894:	461a      	mov	r2, r3
 8004896:	f000 f951 	bl	8004b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2140      	movs	r1, #64	@ 0x40
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fa60 	bl	8004d66 <TIM_ITRx_SetConfig>
      break;
 80048a6:	e00c      	b.n	80048c2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4619      	mov	r1, r3
 80048b2:	4610      	mov	r0, r2
 80048b4:	f000 fa57 	bl	8004d66 <TIM_ITRx_SetConfig>
      break;
 80048b8:	e003      	b.n	80048c2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	73fb      	strb	r3, [r7, #15]
      break;
 80048be:	e000      	b.n	80048c2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80048c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b0c      	cmp	r3, #12
 80048ee:	d831      	bhi.n	8004954 <HAL_TIM_ReadCapturedValue+0x78>
 80048f0:	a201      	add	r2, pc, #4	@ (adr r2, 80048f8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80048f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f6:	bf00      	nop
 80048f8:	0800492d 	.word	0x0800492d
 80048fc:	08004955 	.word	0x08004955
 8004900:	08004955 	.word	0x08004955
 8004904:	08004955 	.word	0x08004955
 8004908:	08004937 	.word	0x08004937
 800490c:	08004955 	.word	0x08004955
 8004910:	08004955 	.word	0x08004955
 8004914:	08004955 	.word	0x08004955
 8004918:	08004941 	.word	0x08004941
 800491c:	08004955 	.word	0x08004955
 8004920:	08004955 	.word	0x08004955
 8004924:	08004955 	.word	0x08004955
 8004928:	0800494b 	.word	0x0800494b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004932:	60fb      	str	r3, [r7, #12]

      break;
 8004934:	e00f      	b.n	8004956 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493c:	60fb      	str	r3, [r7, #12]

      break;
 800493e:	e00a      	b.n	8004956 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004946:	60fb      	str	r3, [r7, #12]

      break;
 8004948:	e005      	b.n	8004956 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004950:	60fb      	str	r3, [r7, #12]

      break;
 8004952:	e000      	b.n	8004956 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004954:	bf00      	nop
  }

  return tmpreg;
 8004956:	68fb      	ldr	r3, [r7, #12]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a2e      	ldr	r2, [pc, #184]	@ (8004a80 <TIM_Base_SetConfig+0xcc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d003      	beq.n	80049d4 <TIM_Base_SetConfig+0x20>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d2:	d108      	bne.n	80049e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a25      	ldr	r2, [pc, #148]	@ (8004a80 <TIM_Base_SetConfig+0xcc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00f      	beq.n	8004a0e <TIM_Base_SetConfig+0x5a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f4:	d00b      	beq.n	8004a0e <TIM_Base_SetConfig+0x5a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a22      	ldr	r2, [pc, #136]	@ (8004a84 <TIM_Base_SetConfig+0xd0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d007      	beq.n	8004a0e <TIM_Base_SetConfig+0x5a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a21      	ldr	r2, [pc, #132]	@ (8004a88 <TIM_Base_SetConfig+0xd4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d003      	beq.n	8004a0e <TIM_Base_SetConfig+0x5a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a20      	ldr	r2, [pc, #128]	@ (8004a8c <TIM_Base_SetConfig+0xd8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d108      	bne.n	8004a20 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a0e      	ldr	r2, [pc, #56]	@ (8004a80 <TIM_Base_SetConfig+0xcc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00b      	beq.n	8004a64 <TIM_Base_SetConfig+0xb0>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a0d      	ldr	r2, [pc, #52]	@ (8004a84 <TIM_Base_SetConfig+0xd0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d007      	beq.n	8004a64 <TIM_Base_SetConfig+0xb0>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a0c      	ldr	r2, [pc, #48]	@ (8004a88 <TIM_Base_SetConfig+0xd4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d003      	beq.n	8004a64 <TIM_Base_SetConfig+0xb0>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a0b      	ldr	r2, [pc, #44]	@ (8004a8c <TIM_Base_SetConfig+0xd8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d103      	bne.n	8004a6c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	615a      	str	r2, [r3, #20]
}
 8004a72:	bf00      	nop
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40012c00 	.word	0x40012c00
 8004a84:	40014000 	.word	0x40014000
 8004a88:	40014400 	.word	0x40014400
 8004a8c:	40014800 	.word	0x40014800

08004a90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f023 0201 	bic.w	r2, r3, #1
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4a1e      	ldr	r2, [pc, #120]	@ (8004b34 <TIM_TI1_SetConfig+0xa4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d007      	beq.n	8004ace <TIM_TI1_SetConfig+0x3e>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ac4:	d003      	beq.n	8004ace <TIM_TI1_SetConfig+0x3e>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8004b38 <TIM_TI1_SetConfig+0xa8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d101      	bne.n	8004ad2 <TIM_TI1_SetConfig+0x42>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <TIM_TI1_SetConfig+0x44>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d008      	beq.n	8004aea <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f023 0303 	bic.w	r3, r3, #3
 8004ade:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	e003      	b.n	8004af2 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004af8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f023 030a 	bic.w	r3, r3, #10
 8004b0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f003 030a 	and.w	r3, r3, #10
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	621a      	str	r2, [r3, #32]
}
 8004b26:	bf00      	nop
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40012c00 	.word	0x40012c00
 8004b38:	40014000 	.word	0x40014000

08004b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	f023 0201 	bic.w	r2, r3, #1
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f023 030a 	bic.w	r3, r3, #10
 8004b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	621a      	str	r2, [r3, #32]
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b087      	sub	sp, #28
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	607a      	str	r2, [r7, #4]
 8004ba6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	f023 0210 	bic.w	r2, r3, #16
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bc6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	021b      	lsls	r3, r3, #8
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	031b      	lsls	r3, r3, #12
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004bec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	621a      	str	r2, [r3, #32]
}
 8004c08:	bf00      	nop
 8004c0a:	371c      	adds	r7, #28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	f023 0210 	bic.w	r2, r3, #16
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	031b      	lsls	r3, r3, #12
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	621a      	str	r2, [r3, #32]
}
 8004c68:	bf00      	nop
 8004c6a:	371c      	adds	r7, #28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f023 0303 	bic.w	r3, r3, #3
 8004ca0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cb0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	011b      	lsls	r3, r3, #4
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004cc4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	021b      	lsls	r3, r3, #8
 8004cca:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	621a      	str	r2, [r3, #32]
}
 8004ce0:	bf00      	nop
 8004ce2:	371c      	adds	r7, #28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d2a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	031b      	lsls	r3, r3, #12
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004d3e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	031b      	lsls	r3, r3, #12
 8004d44:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	621a      	str	r2, [r3, #32]
}
 8004d5a:	bf00      	nop
 8004d5c:	371c      	adds	r7, #28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b085      	sub	sp, #20
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f043 0307 	orr.w	r3, r3, #7
 8004d88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	609a      	str	r2, [r3, #8]
}
 8004d90:	bf00      	nop
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004db6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	021a      	lsls	r2, r3, #8
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	609a      	str	r2, [r3, #8]
}
 8004dd0:	bf00      	nop
 8004dd2:	371c      	adds	r7, #28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f003 031f 	and.w	r3, r3, #31
 8004dee:	2201      	movs	r2, #1
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a1a      	ldr	r2, [r3, #32]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	401a      	ands	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a1a      	ldr	r2, [r3, #32]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f003 031f 	and.w	r3, r3, #31
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	fa01 f303 	lsl.w	r3, r1, r3
 8004e14:	431a      	orrs	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	621a      	str	r2, [r3, #32]
}
 8004e1a:	bf00      	nop
 8004e1c:	371c      	adds	r7, #28
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
	...

08004e28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d101      	bne.n	8004e40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e04f      	b.n	8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a21      	ldr	r2, [pc, #132]	@ (8004eec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d108      	bne.n	8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a14      	ldr	r2, [pc, #80]	@ (8004eec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea8:	d004      	beq.n	8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a10      	ldr	r2, [pc, #64]	@ (8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d10c      	bne.n	8004ece <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	40012c00 	.word	0x40012c00
 8004ef0:	40014000 	.word	0x40014000

08004ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e040      	b.n	8004fc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fc faa8 	bl	80014a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2224      	movs	r2, #36	@ 0x24
 8004f5c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0201 	bic.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fbbc 	bl	80056ec <UART_SetConfig>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d101      	bne.n	8004f7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e022      	b.n	8004fc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fce6 	bl	8005958 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fd6d 	bl	8005a9c <UART_CheckIdleState>
 8004fc2:	4603      	mov	r3, r0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08a      	sub	sp, #40	@ 0x28
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d177      	bne.n	80050d4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_UART_Transmit+0x24>
 8004fea:	88fb      	ldrh	r3, [r7, #6]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e070      	b.n	80050d6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2221      	movs	r2, #33	@ 0x21
 8005000:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005002:	f7fc fbab 	bl	800175c <HAL_GetTick>
 8005006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	88fa      	ldrh	r2, [r7, #6]
 800500c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	88fa      	ldrh	r2, [r7, #6]
 8005014:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005020:	d108      	bne.n	8005034 <HAL_UART_Transmit+0x68>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d104      	bne.n	8005034 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800502a:	2300      	movs	r3, #0
 800502c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	61bb      	str	r3, [r7, #24]
 8005032:	e003      	b.n	800503c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005038:	2300      	movs	r3, #0
 800503a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800503c:	e02f      	b.n	800509e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2200      	movs	r2, #0
 8005046:	2180      	movs	r1, #128	@ 0x80
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 fdcf 	bl	8005bec <UART_WaitOnFlagUntilTimeout>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d004      	beq.n	800505e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2220      	movs	r2, #32
 8005058:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e03b      	b.n	80050d6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10b      	bne.n	800507c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	881a      	ldrh	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005070:	b292      	uxth	r2, r2
 8005072:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	3302      	adds	r3, #2
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	e007      	b.n	800508c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	781a      	ldrb	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	3301      	adds	r3, #1
 800508a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1c9      	bne.n	800503e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2200      	movs	r2, #0
 80050b2:	2140      	movs	r1, #64	@ 0x40
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 fd99 	bl	8005bec <UART_WaitOnFlagUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d004      	beq.n	80050ca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2220      	movs	r2, #32
 80050c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e005      	b.n	80050d6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2220      	movs	r2, #32
 80050ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	e000      	b.n	80050d6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80050d4:	2302      	movs	r3, #2
  }
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3720      	adds	r7, #32
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b0ba      	sub	sp, #232	@ 0xe8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005106:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800510a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800510e:	4013      	ands	r3, r2
 8005110:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005114:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005118:	2b00      	cmp	r3, #0
 800511a:	d115      	bne.n	8005148 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800511c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00f      	beq.n	8005148 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b00      	cmp	r3, #0
 8005132:	d009      	beq.n	8005148 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 82ab 	beq.w	8005694 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	4798      	blx	r3
      }
      return;
 8005146:	e2a5      	b.n	8005694 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005148:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 8117 	beq.w	8005380 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800515e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005162:	4b85      	ldr	r3, [pc, #532]	@ (8005378 <HAL_UART_IRQHandler+0x298>)
 8005164:	4013      	ands	r3, r2
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 810a 	beq.w	8005380 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800516c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d011      	beq.n	800519c <HAL_UART_IRQHandler+0xbc>
 8005178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800517c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00b      	beq.n	800519c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2201      	movs	r2, #1
 800518a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005192:	f043 0201 	orr.w	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800519c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d011      	beq.n	80051cc <HAL_UART_IRQHandler+0xec>
 80051a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00b      	beq.n	80051cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2202      	movs	r2, #2
 80051ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051c2:	f043 0204 	orr.w	r2, r3, #4
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d011      	beq.n	80051fc <HAL_UART_IRQHandler+0x11c>
 80051d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00b      	beq.n	80051fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2204      	movs	r2, #4
 80051ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051f2:	f043 0202 	orr.w	r2, r3, #2
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80051fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	d017      	beq.n	8005238 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	2b00      	cmp	r3, #0
 8005212:	d105      	bne.n	8005220 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005218:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00b      	beq.n	8005238 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2208      	movs	r2, #8
 8005226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800522e:	f043 0208 	orr.w	r2, r3, #8
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800523c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005240:	2b00      	cmp	r3, #0
 8005242:	d012      	beq.n	800526a <HAL_UART_IRQHandler+0x18a>
 8005244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005248:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00c      	beq.n	800526a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005258:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005260:	f043 0220 	orr.w	r2, r3, #32
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8211 	beq.w	8005698 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00d      	beq.n	800529e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b00      	cmp	r3, #0
 800528c:	d007      	beq.n	800529e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b2:	2b40      	cmp	r3, #64	@ 0x40
 80052b4:	d005      	beq.n	80052c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d04f      	beq.n	8005362 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fcf9 	bl	8005cba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d2:	2b40      	cmp	r3, #64	@ 0x40
 80052d4:	d141      	bne.n	800535a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3308      	adds	r3, #8
 80052dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80052ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3308      	adds	r3, #8
 80052fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005302:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005306:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800530e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800531a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1d9      	bne.n	80052d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005326:	2b00      	cmp	r3, #0
 8005328:	d013      	beq.n	8005352 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800532e:	4a13      	ldr	r2, [pc, #76]	@ (800537c <HAL_UART_IRQHandler+0x29c>)
 8005330:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005336:	4618      	mov	r0, r3
 8005338:	f7fc fb8a 	bl	8001a50 <HAL_DMA_Abort_IT>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d017      	beq.n	8005372 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800534c:	4610      	mov	r0, r2
 800534e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005350:	e00f      	b.n	8005372 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f9b4 	bl	80056c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005358:	e00b      	b.n	8005372 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f9b0 	bl	80056c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005360:	e007      	b.n	8005372 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f9ac 	bl	80056c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005370:	e192      	b.n	8005698 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005372:	bf00      	nop
    return;
 8005374:	e190      	b.n	8005698 <HAL_UART_IRQHandler+0x5b8>
 8005376:	bf00      	nop
 8005378:	04000120 	.word	0x04000120
 800537c:	08005d83 	.word	0x08005d83

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005384:	2b01      	cmp	r3, #1
 8005386:	f040 814b 	bne.w	8005620 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800538a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800538e:	f003 0310 	and.w	r3, r3, #16
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 8144 	beq.w	8005620 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800539c:	f003 0310 	and.w	r3, r3, #16
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 813d 	beq.w	8005620 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2210      	movs	r2, #16
 80053ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b8:	2b40      	cmp	r3, #64	@ 0x40
 80053ba:	f040 80b5 	bne.w	8005528 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 8164 	beq.w	800569c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80053da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053de:	429a      	cmp	r2, r3
 80053e0:	f080 815c 	bcs.w	800569c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	f000 8086 	beq.w	8005506 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005402:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005406:	e853 3f00 	ldrex	r3, [r3]
 800540a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800540e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005412:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005416:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005424:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005428:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005430:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005434:	e841 2300 	strex	r3, r2, [r1]
 8005438:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800543c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1da      	bne.n	80053fa <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3308      	adds	r3, #8
 800544a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800544e:	e853 3f00 	ldrex	r3, [r3]
 8005452:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005454:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005456:	f023 0301 	bic.w	r3, r3, #1
 800545a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3308      	adds	r3, #8
 8005464:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005468:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800546c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005470:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800547a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e1      	bne.n	8005444 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3308      	adds	r3, #8
 8005486:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005490:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005492:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005496:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3308      	adds	r3, #8
 80054a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80054a4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80054a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80054aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054ac:	e841 2300 	strex	r3, r2, [r1]
 80054b0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80054b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1e3      	bne.n	8005480 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054ce:	e853 3f00 	ldrex	r3, [r3]
 80054d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054d6:	f023 0310 	bic.w	r3, r3, #16
 80054da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054ea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e4      	bne.n	80054c6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005500:	4618      	mov	r0, r3
 8005502:	f7fc fa6c 	bl	80019de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2202      	movs	r2, #2
 800550a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005518:	b29b      	uxth	r3, r3
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	b29b      	uxth	r3, r3
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f8d7 	bl	80056d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005526:	e0b9      	b.n	800569c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005534:	b29b      	uxth	r3, r3
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005542:	b29b      	uxth	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80ab 	beq.w	80056a0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800554a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 80a6 	beq.w	80056a0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005564:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005568:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	461a      	mov	r2, r3
 8005572:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005576:	647b      	str	r3, [r7, #68]	@ 0x44
 8005578:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800557c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1e4      	bne.n	8005554 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3308      	adds	r3, #8
 8005590:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	623b      	str	r3, [r7, #32]
   return(result);
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	f023 0301 	bic.w	r3, r3, #1
 80055a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3308      	adds	r3, #8
 80055aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80055ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80055b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1e3      	bne.n	800558a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0310 	bic.w	r3, r3, #16
 80055ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	461a      	mov	r2, r3
 80055f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80055f8:	61fb      	str	r3, [r7, #28]
 80055fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	69b9      	ldr	r1, [r7, #24]
 80055fe:	69fa      	ldr	r2, [r7, #28]
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	617b      	str	r3, [r7, #20]
   return(result);
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e4      	bne.n	80055d6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005612:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f85b 	bl	80056d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800561e:	e03f      	b.n	80056a0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005624:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00e      	beq.n	800564a <HAL_UART_IRQHandler+0x56a>
 800562c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005630:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d008      	beq.n	800564a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005640:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fbdd 	bl	8005e02 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005648:	e02d      	b.n	80056a6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800564a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800564e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00e      	beq.n	8005674 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800565a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800565e:	2b00      	cmp	r3, #0
 8005660:	d008      	beq.n	8005674 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005666:	2b00      	cmp	r3, #0
 8005668:	d01c      	beq.n	80056a4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	4798      	blx	r3
    }
    return;
 8005672:	e017      	b.n	80056a4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800567c:	2b00      	cmp	r3, #0
 800567e:	d012      	beq.n	80056a6 <HAL_UART_IRQHandler+0x5c6>
 8005680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00c      	beq.n	80056a6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fb8e 	bl	8005dae <UART_EndTransmit_IT>
    return;
 8005692:	e008      	b.n	80056a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005694:	bf00      	nop
 8005696:	e006      	b.n	80056a6 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005698:	bf00      	nop
 800569a:	e004      	b.n	80056a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 800569c:	bf00      	nop
 800569e:	e002      	b.n	80056a6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80056a0:	bf00      	nop
 80056a2:	e000      	b.n	80056a6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80056a4:	bf00      	nop
  }

}
 80056a6:	37e8      	adds	r7, #232	@ 0xe8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	4b8a      	ldr	r3, [pc, #552]	@ (8005940 <UART_SetConfig+0x254>)
 8005718:	4013      	ands	r3, r2
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6812      	ldr	r2, [r2, #0]
 800571e:	6979      	ldr	r1, [r7, #20]
 8005720:	430b      	orrs	r3, r1
 8005722:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	430a      	orrs	r2, r1
 800575c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a78      	ldr	r2, [pc, #480]	@ (8005944 <UART_SetConfig+0x258>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d120      	bne.n	80057aa <UART_SetConfig+0xbe>
 8005768:	4b77      	ldr	r3, [pc, #476]	@ (8005948 <UART_SetConfig+0x25c>)
 800576a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	2b03      	cmp	r3, #3
 8005772:	d817      	bhi.n	80057a4 <UART_SetConfig+0xb8>
 8005774:	a201      	add	r2, pc, #4	@ (adr r2, 800577c <UART_SetConfig+0x90>)
 8005776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577a:	bf00      	nop
 800577c:	0800578d 	.word	0x0800578d
 8005780:	08005799 	.word	0x08005799
 8005784:	0800579f 	.word	0x0800579f
 8005788:	08005793 	.word	0x08005793
 800578c:	2300      	movs	r3, #0
 800578e:	77fb      	strb	r3, [r7, #31]
 8005790:	e01d      	b.n	80057ce <UART_SetConfig+0xe2>
 8005792:	2302      	movs	r3, #2
 8005794:	77fb      	strb	r3, [r7, #31]
 8005796:	e01a      	b.n	80057ce <UART_SetConfig+0xe2>
 8005798:	2304      	movs	r3, #4
 800579a:	77fb      	strb	r3, [r7, #31]
 800579c:	e017      	b.n	80057ce <UART_SetConfig+0xe2>
 800579e:	2308      	movs	r3, #8
 80057a0:	77fb      	strb	r3, [r7, #31]
 80057a2:	e014      	b.n	80057ce <UART_SetConfig+0xe2>
 80057a4:	2310      	movs	r3, #16
 80057a6:	77fb      	strb	r3, [r7, #31]
 80057a8:	e011      	b.n	80057ce <UART_SetConfig+0xe2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a67      	ldr	r2, [pc, #412]	@ (800594c <UART_SetConfig+0x260>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d102      	bne.n	80057ba <UART_SetConfig+0xce>
 80057b4:	2300      	movs	r3, #0
 80057b6:	77fb      	strb	r3, [r7, #31]
 80057b8:	e009      	b.n	80057ce <UART_SetConfig+0xe2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a64      	ldr	r2, [pc, #400]	@ (8005950 <UART_SetConfig+0x264>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d102      	bne.n	80057ca <UART_SetConfig+0xde>
 80057c4:	2300      	movs	r3, #0
 80057c6:	77fb      	strb	r3, [r7, #31]
 80057c8:	e001      	b.n	80057ce <UART_SetConfig+0xe2>
 80057ca:	2310      	movs	r3, #16
 80057cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057d6:	d15a      	bne.n	800588e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80057d8:	7ffb      	ldrb	r3, [r7, #31]
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d827      	bhi.n	800582e <UART_SetConfig+0x142>
 80057de:	a201      	add	r2, pc, #4	@ (adr r2, 80057e4 <UART_SetConfig+0xf8>)
 80057e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e4:	08005809 	.word	0x08005809
 80057e8:	08005811 	.word	0x08005811
 80057ec:	08005819 	.word	0x08005819
 80057f0:	0800582f 	.word	0x0800582f
 80057f4:	0800581f 	.word	0x0800581f
 80057f8:	0800582f 	.word	0x0800582f
 80057fc:	0800582f 	.word	0x0800582f
 8005800:	0800582f 	.word	0x0800582f
 8005804:	08005827 	.word	0x08005827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005808:	f7fe fa36 	bl	8003c78 <HAL_RCC_GetPCLK1Freq>
 800580c:	61b8      	str	r0, [r7, #24]
        break;
 800580e:	e013      	b.n	8005838 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005810:	f7fe fa54 	bl	8003cbc <HAL_RCC_GetPCLK2Freq>
 8005814:	61b8      	str	r0, [r7, #24]
        break;
 8005816:	e00f      	b.n	8005838 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005818:	4b4e      	ldr	r3, [pc, #312]	@ (8005954 <UART_SetConfig+0x268>)
 800581a:	61bb      	str	r3, [r7, #24]
        break;
 800581c:	e00c      	b.n	8005838 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800581e:	f7fe f9b5 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 8005822:	61b8      	str	r0, [r7, #24]
        break;
 8005824:	e008      	b.n	8005838 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800582a:	61bb      	str	r3, [r7, #24]
        break;
 800582c:	e004      	b.n	8005838 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	77bb      	strb	r3, [r7, #30]
        break;
 8005836:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d074      	beq.n	8005928 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	005a      	lsls	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	085b      	lsrs	r3, r3, #1
 8005848:	441a      	add	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005852:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	2b0f      	cmp	r3, #15
 8005858:	d916      	bls.n	8005888 <UART_SetConfig+0x19c>
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005860:	d212      	bcs.n	8005888 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	b29b      	uxth	r3, r3
 8005866:	f023 030f 	bic.w	r3, r3, #15
 800586a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	085b      	lsrs	r3, r3, #1
 8005870:	b29b      	uxth	r3, r3
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	b29a      	uxth	r2, r3
 8005878:	89fb      	ldrh	r3, [r7, #14]
 800587a:	4313      	orrs	r3, r2
 800587c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	89fa      	ldrh	r2, [r7, #14]
 8005884:	60da      	str	r2, [r3, #12]
 8005886:	e04f      	b.n	8005928 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	77bb      	strb	r3, [r7, #30]
 800588c:	e04c      	b.n	8005928 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800588e:	7ffb      	ldrb	r3, [r7, #31]
 8005890:	2b08      	cmp	r3, #8
 8005892:	d828      	bhi.n	80058e6 <UART_SetConfig+0x1fa>
 8005894:	a201      	add	r2, pc, #4	@ (adr r2, 800589c <UART_SetConfig+0x1b0>)
 8005896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589a:	bf00      	nop
 800589c:	080058c1 	.word	0x080058c1
 80058a0:	080058c9 	.word	0x080058c9
 80058a4:	080058d1 	.word	0x080058d1
 80058a8:	080058e7 	.word	0x080058e7
 80058ac:	080058d7 	.word	0x080058d7
 80058b0:	080058e7 	.word	0x080058e7
 80058b4:	080058e7 	.word	0x080058e7
 80058b8:	080058e7 	.word	0x080058e7
 80058bc:	080058df 	.word	0x080058df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058c0:	f7fe f9da 	bl	8003c78 <HAL_RCC_GetPCLK1Freq>
 80058c4:	61b8      	str	r0, [r7, #24]
        break;
 80058c6:	e013      	b.n	80058f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058c8:	f7fe f9f8 	bl	8003cbc <HAL_RCC_GetPCLK2Freq>
 80058cc:	61b8      	str	r0, [r7, #24]
        break;
 80058ce:	e00f      	b.n	80058f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058d0:	4b20      	ldr	r3, [pc, #128]	@ (8005954 <UART_SetConfig+0x268>)
 80058d2:	61bb      	str	r3, [r7, #24]
        break;
 80058d4:	e00c      	b.n	80058f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058d6:	f7fe f959 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 80058da:	61b8      	str	r0, [r7, #24]
        break;
 80058dc:	e008      	b.n	80058f0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058e2:	61bb      	str	r3, [r7, #24]
        break;
 80058e4:	e004      	b.n	80058f0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	77bb      	strb	r3, [r7, #30]
        break;
 80058ee:	bf00      	nop
    }

    if (pclk != 0U)
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d018      	beq.n	8005928 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	085a      	lsrs	r2, r3, #1
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	441a      	add	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	fbb2 f3f3 	udiv	r3, r2, r3
 8005908:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b0f      	cmp	r3, #15
 800590e:	d909      	bls.n	8005924 <UART_SetConfig+0x238>
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005916:	d205      	bcs.n	8005924 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	b29a      	uxth	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60da      	str	r2, [r3, #12]
 8005922:	e001      	b.n	8005928 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005934:	7fbb      	ldrb	r3, [r7, #30]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3720      	adds	r7, #32
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	efff69f3 	.word	0xefff69f3
 8005944:	40013800 	.word	0x40013800
 8005948:	40021000 	.word	0x40021000
 800594c:	40004400 	.word	0x40004400
 8005950:	40004800 	.word	0x40004800
 8005954:	007a1200 	.word	0x007a1200

08005958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a8:	f003 0304 	and.w	r3, r3, #4
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01a      	beq.n	8005a6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a56:	d10a      	bne.n	8005a6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	605a      	str	r2, [r3, #4]
  }
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b098      	sub	sp, #96	@ 0x60
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aac:	f7fb fe56 	bl	800175c <HAL_GetTick>
 8005ab0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d12e      	bne.n	8005b1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ac0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f88c 	bl	8005bec <UART_WaitOnFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d021      	beq.n	8005b1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae2:	e853 3f00 	ldrex	r3, [r3]
 8005ae6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aee:	653b      	str	r3, [r7, #80]	@ 0x50
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	461a      	mov	r2, r3
 8005af6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005afa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005afe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b00:	e841 2300 	strex	r3, r2, [r1]
 8005b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1e6      	bne.n	8005ada <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e062      	b.n	8005be4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b04      	cmp	r3, #4
 8005b2a:	d149      	bne.n	8005bc0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b34:	2200      	movs	r2, #0
 8005b36:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f856 	bl	8005bec <UART_WaitOnFlagUntilTimeout>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d03c      	beq.n	8005bc0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	623b      	str	r3, [r7, #32]
   return(result);
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	461a      	mov	r2, r3
 8005b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b64:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b6c:	e841 2300 	strex	r3, r2, [r1]
 8005b70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e6      	bne.n	8005b46 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0301 	bic.w	r3, r3, #1
 8005b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3308      	adds	r3, #8
 8005b96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b98:	61fa      	str	r2, [r7, #28]
 8005b9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	69b9      	ldr	r1, [r7, #24]
 8005b9e:	69fa      	ldr	r2, [r7, #28]
 8005ba0:	e841 2300 	strex	r3, r2, [r1]
 8005ba4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e5      	bne.n	8005b78 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e011      	b.n	8005be4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3758      	adds	r7, #88	@ 0x58
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	603b      	str	r3, [r7, #0]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bfc:	e049      	b.n	8005c92 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c04:	d045      	beq.n	8005c92 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c06:	f7fb fda9 	bl	800175c <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d302      	bcc.n	8005c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e048      	b.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0304 	and.w	r3, r3, #4
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d031      	beq.n	8005c92 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d110      	bne.n	8005c5e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2208      	movs	r2, #8
 8005c42:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 f838 	bl	8005cba <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2208      	movs	r2, #8
 8005c4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e029      	b.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c6c:	d111      	bne.n	8005c92 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 f81e 	bl	8005cba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e00f      	b.n	8005cb2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	69da      	ldr	r2, [r3, #28]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	bf0c      	ite	eq
 8005ca2:	2301      	moveq	r3, #1
 8005ca4:	2300      	movne	r3, #0
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d0a6      	beq.n	8005bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b095      	sub	sp, #84	@ 0x54
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ce0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ce2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ce6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e6      	bne.n	8005cc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f023 0301 	bic.w	r3, r3, #1
 8005d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3308      	adds	r3, #8
 8005d12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d1c:	e841 2300 	strex	r3, r2, [r1]
 8005d20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e5      	bne.n	8005cf4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d118      	bne.n	8005d62 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	e853 3f00 	ldrex	r3, [r3]
 8005d3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f023 0310 	bic.w	r3, r3, #16
 8005d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d4e:	61bb      	str	r3, [r7, #24]
 8005d50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d52:	6979      	ldr	r1, [r7, #20]
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e6      	bne.n	8005d30 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005d76:	bf00      	nop
 8005d78:	3754      	adds	r7, #84	@ 0x54
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f7ff fc8d 	bl	80056c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005da6:	bf00      	nop
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b088      	sub	sp, #32
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	e853 3f00 	ldrex	r3, [r3]
 8005dc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dca:	61fb      	str	r3, [r7, #28]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	61bb      	str	r3, [r7, #24]
 8005dd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	6979      	ldr	r1, [r7, #20]
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	613b      	str	r3, [r7, #16]
   return(result);
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e6      	bne.n	8005db6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff fc59 	bl	80056ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dfa:	bf00      	nop
 8005dfc:	3720      	adds	r7, #32
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
	...

08005e18 <siprintf>:
 8005e18:	b40e      	push	{r1, r2, r3}
 8005e1a:	b500      	push	{lr}
 8005e1c:	b09c      	sub	sp, #112	@ 0x70
 8005e1e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005e20:	9002      	str	r0, [sp, #8]
 8005e22:	9006      	str	r0, [sp, #24]
 8005e24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e28:	4809      	ldr	r0, [pc, #36]	@ (8005e50 <siprintf+0x38>)
 8005e2a:	9107      	str	r1, [sp, #28]
 8005e2c:	9104      	str	r1, [sp, #16]
 8005e2e:	4909      	ldr	r1, [pc, #36]	@ (8005e54 <siprintf+0x3c>)
 8005e30:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e34:	9105      	str	r1, [sp, #20]
 8005e36:	6800      	ldr	r0, [r0, #0]
 8005e38:	9301      	str	r3, [sp, #4]
 8005e3a:	a902      	add	r1, sp, #8
 8005e3c:	f000 f994 	bl	8006168 <_svfiprintf_r>
 8005e40:	9b02      	ldr	r3, [sp, #8]
 8005e42:	2200      	movs	r2, #0
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	b01c      	add	sp, #112	@ 0x70
 8005e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e4c:	b003      	add	sp, #12
 8005e4e:	4770      	bx	lr
 8005e50:	20000014 	.word	0x20000014
 8005e54:	ffff0208 	.word	0xffff0208

08005e58 <memset>:
 8005e58:	4402      	add	r2, r0
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d100      	bne.n	8005e62 <memset+0xa>
 8005e60:	4770      	bx	lr
 8005e62:	f803 1b01 	strb.w	r1, [r3], #1
 8005e66:	e7f9      	b.n	8005e5c <memset+0x4>

08005e68 <__errno>:
 8005e68:	4b01      	ldr	r3, [pc, #4]	@ (8005e70 <__errno+0x8>)
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	20000014 	.word	0x20000014

08005e74 <__libc_init_array>:
 8005e74:	b570      	push	{r4, r5, r6, lr}
 8005e76:	4d0d      	ldr	r5, [pc, #52]	@ (8005eac <__libc_init_array+0x38>)
 8005e78:	4c0d      	ldr	r4, [pc, #52]	@ (8005eb0 <__libc_init_array+0x3c>)
 8005e7a:	1b64      	subs	r4, r4, r5
 8005e7c:	10a4      	asrs	r4, r4, #2
 8005e7e:	2600      	movs	r6, #0
 8005e80:	42a6      	cmp	r6, r4
 8005e82:	d109      	bne.n	8005e98 <__libc_init_array+0x24>
 8005e84:	4d0b      	ldr	r5, [pc, #44]	@ (8005eb4 <__libc_init_array+0x40>)
 8005e86:	4c0c      	ldr	r4, [pc, #48]	@ (8005eb8 <__libc_init_array+0x44>)
 8005e88:	f000 fc66 	bl	8006758 <_init>
 8005e8c:	1b64      	subs	r4, r4, r5
 8005e8e:	10a4      	asrs	r4, r4, #2
 8005e90:	2600      	movs	r6, #0
 8005e92:	42a6      	cmp	r6, r4
 8005e94:	d105      	bne.n	8005ea2 <__libc_init_array+0x2e>
 8005e96:	bd70      	pop	{r4, r5, r6, pc}
 8005e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e9c:	4798      	blx	r3
 8005e9e:	3601      	adds	r6, #1
 8005ea0:	e7ee      	b.n	8005e80 <__libc_init_array+0xc>
 8005ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ea6:	4798      	blx	r3
 8005ea8:	3601      	adds	r6, #1
 8005eaa:	e7f2      	b.n	8005e92 <__libc_init_array+0x1e>
 8005eac:	08006f8c 	.word	0x08006f8c
 8005eb0:	08006f8c 	.word	0x08006f8c
 8005eb4:	08006f8c 	.word	0x08006f8c
 8005eb8:	08006f90 	.word	0x08006f90

08005ebc <__retarget_lock_acquire_recursive>:
 8005ebc:	4770      	bx	lr

08005ebe <__retarget_lock_release_recursive>:
 8005ebe:	4770      	bx	lr

08005ec0 <_free_r>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	4605      	mov	r5, r0
 8005ec4:	2900      	cmp	r1, #0
 8005ec6:	d041      	beq.n	8005f4c <_free_r+0x8c>
 8005ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ecc:	1f0c      	subs	r4, r1, #4
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	bfb8      	it	lt
 8005ed2:	18e4      	addlt	r4, r4, r3
 8005ed4:	f000 f8e0 	bl	8006098 <__malloc_lock>
 8005ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f50 <_free_r+0x90>)
 8005eda:	6813      	ldr	r3, [r2, #0]
 8005edc:	b933      	cbnz	r3, 8005eec <_free_r+0x2c>
 8005ede:	6063      	str	r3, [r4, #4]
 8005ee0:	6014      	str	r4, [r2, #0]
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ee8:	f000 b8dc 	b.w	80060a4 <__malloc_unlock>
 8005eec:	42a3      	cmp	r3, r4
 8005eee:	d908      	bls.n	8005f02 <_free_r+0x42>
 8005ef0:	6820      	ldr	r0, [r4, #0]
 8005ef2:	1821      	adds	r1, r4, r0
 8005ef4:	428b      	cmp	r3, r1
 8005ef6:	bf01      	itttt	eq
 8005ef8:	6819      	ldreq	r1, [r3, #0]
 8005efa:	685b      	ldreq	r3, [r3, #4]
 8005efc:	1809      	addeq	r1, r1, r0
 8005efe:	6021      	streq	r1, [r4, #0]
 8005f00:	e7ed      	b.n	8005ede <_free_r+0x1e>
 8005f02:	461a      	mov	r2, r3
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	b10b      	cbz	r3, 8005f0c <_free_r+0x4c>
 8005f08:	42a3      	cmp	r3, r4
 8005f0a:	d9fa      	bls.n	8005f02 <_free_r+0x42>
 8005f0c:	6811      	ldr	r1, [r2, #0]
 8005f0e:	1850      	adds	r0, r2, r1
 8005f10:	42a0      	cmp	r0, r4
 8005f12:	d10b      	bne.n	8005f2c <_free_r+0x6c>
 8005f14:	6820      	ldr	r0, [r4, #0]
 8005f16:	4401      	add	r1, r0
 8005f18:	1850      	adds	r0, r2, r1
 8005f1a:	4283      	cmp	r3, r0
 8005f1c:	6011      	str	r1, [r2, #0]
 8005f1e:	d1e0      	bne.n	8005ee2 <_free_r+0x22>
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	6053      	str	r3, [r2, #4]
 8005f26:	4408      	add	r0, r1
 8005f28:	6010      	str	r0, [r2, #0]
 8005f2a:	e7da      	b.n	8005ee2 <_free_r+0x22>
 8005f2c:	d902      	bls.n	8005f34 <_free_r+0x74>
 8005f2e:	230c      	movs	r3, #12
 8005f30:	602b      	str	r3, [r5, #0]
 8005f32:	e7d6      	b.n	8005ee2 <_free_r+0x22>
 8005f34:	6820      	ldr	r0, [r4, #0]
 8005f36:	1821      	adds	r1, r4, r0
 8005f38:	428b      	cmp	r3, r1
 8005f3a:	bf04      	itt	eq
 8005f3c:	6819      	ldreq	r1, [r3, #0]
 8005f3e:	685b      	ldreq	r3, [r3, #4]
 8005f40:	6063      	str	r3, [r4, #4]
 8005f42:	bf04      	itt	eq
 8005f44:	1809      	addeq	r1, r1, r0
 8005f46:	6021      	streq	r1, [r4, #0]
 8005f48:	6054      	str	r4, [r2, #4]
 8005f4a:	e7ca      	b.n	8005ee2 <_free_r+0x22>
 8005f4c:	bd38      	pop	{r3, r4, r5, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000a34 	.word	0x20000a34

08005f54 <sbrk_aligned>:
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	4e0f      	ldr	r6, [pc, #60]	@ (8005f94 <sbrk_aligned+0x40>)
 8005f58:	460c      	mov	r4, r1
 8005f5a:	6831      	ldr	r1, [r6, #0]
 8005f5c:	4605      	mov	r5, r0
 8005f5e:	b911      	cbnz	r1, 8005f66 <sbrk_aligned+0x12>
 8005f60:	f000 fba6 	bl	80066b0 <_sbrk_r>
 8005f64:	6030      	str	r0, [r6, #0]
 8005f66:	4621      	mov	r1, r4
 8005f68:	4628      	mov	r0, r5
 8005f6a:	f000 fba1 	bl	80066b0 <_sbrk_r>
 8005f6e:	1c43      	adds	r3, r0, #1
 8005f70:	d103      	bne.n	8005f7a <sbrk_aligned+0x26>
 8005f72:	f04f 34ff 	mov.w	r4, #4294967295
 8005f76:	4620      	mov	r0, r4
 8005f78:	bd70      	pop	{r4, r5, r6, pc}
 8005f7a:	1cc4      	adds	r4, r0, #3
 8005f7c:	f024 0403 	bic.w	r4, r4, #3
 8005f80:	42a0      	cmp	r0, r4
 8005f82:	d0f8      	beq.n	8005f76 <sbrk_aligned+0x22>
 8005f84:	1a21      	subs	r1, r4, r0
 8005f86:	4628      	mov	r0, r5
 8005f88:	f000 fb92 	bl	80066b0 <_sbrk_r>
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d1f2      	bne.n	8005f76 <sbrk_aligned+0x22>
 8005f90:	e7ef      	b.n	8005f72 <sbrk_aligned+0x1e>
 8005f92:	bf00      	nop
 8005f94:	20000a30 	.word	0x20000a30

08005f98 <_malloc_r>:
 8005f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f9c:	1ccd      	adds	r5, r1, #3
 8005f9e:	f025 0503 	bic.w	r5, r5, #3
 8005fa2:	3508      	adds	r5, #8
 8005fa4:	2d0c      	cmp	r5, #12
 8005fa6:	bf38      	it	cc
 8005fa8:	250c      	movcc	r5, #12
 8005faa:	2d00      	cmp	r5, #0
 8005fac:	4606      	mov	r6, r0
 8005fae:	db01      	blt.n	8005fb4 <_malloc_r+0x1c>
 8005fb0:	42a9      	cmp	r1, r5
 8005fb2:	d904      	bls.n	8005fbe <_malloc_r+0x26>
 8005fb4:	230c      	movs	r3, #12
 8005fb6:	6033      	str	r3, [r6, #0]
 8005fb8:	2000      	movs	r0, #0
 8005fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006094 <_malloc_r+0xfc>
 8005fc2:	f000 f869 	bl	8006098 <__malloc_lock>
 8005fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8005fca:	461c      	mov	r4, r3
 8005fcc:	bb44      	cbnz	r4, 8006020 <_malloc_r+0x88>
 8005fce:	4629      	mov	r1, r5
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f7ff ffbf 	bl	8005f54 <sbrk_aligned>
 8005fd6:	1c43      	adds	r3, r0, #1
 8005fd8:	4604      	mov	r4, r0
 8005fda:	d158      	bne.n	800608e <_malloc_r+0xf6>
 8005fdc:	f8d8 4000 	ldr.w	r4, [r8]
 8005fe0:	4627      	mov	r7, r4
 8005fe2:	2f00      	cmp	r7, #0
 8005fe4:	d143      	bne.n	800606e <_malloc_r+0xd6>
 8005fe6:	2c00      	cmp	r4, #0
 8005fe8:	d04b      	beq.n	8006082 <_malloc_r+0xea>
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	4639      	mov	r1, r7
 8005fee:	4630      	mov	r0, r6
 8005ff0:	eb04 0903 	add.w	r9, r4, r3
 8005ff4:	f000 fb5c 	bl	80066b0 <_sbrk_r>
 8005ff8:	4581      	cmp	r9, r0
 8005ffa:	d142      	bne.n	8006082 <_malloc_r+0xea>
 8005ffc:	6821      	ldr	r1, [r4, #0]
 8005ffe:	1a6d      	subs	r5, r5, r1
 8006000:	4629      	mov	r1, r5
 8006002:	4630      	mov	r0, r6
 8006004:	f7ff ffa6 	bl	8005f54 <sbrk_aligned>
 8006008:	3001      	adds	r0, #1
 800600a:	d03a      	beq.n	8006082 <_malloc_r+0xea>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	442b      	add	r3, r5
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	f8d8 3000 	ldr.w	r3, [r8]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	bb62      	cbnz	r2, 8006074 <_malloc_r+0xdc>
 800601a:	f8c8 7000 	str.w	r7, [r8]
 800601e:	e00f      	b.n	8006040 <_malloc_r+0xa8>
 8006020:	6822      	ldr	r2, [r4, #0]
 8006022:	1b52      	subs	r2, r2, r5
 8006024:	d420      	bmi.n	8006068 <_malloc_r+0xd0>
 8006026:	2a0b      	cmp	r2, #11
 8006028:	d917      	bls.n	800605a <_malloc_r+0xc2>
 800602a:	1961      	adds	r1, r4, r5
 800602c:	42a3      	cmp	r3, r4
 800602e:	6025      	str	r5, [r4, #0]
 8006030:	bf18      	it	ne
 8006032:	6059      	strne	r1, [r3, #4]
 8006034:	6863      	ldr	r3, [r4, #4]
 8006036:	bf08      	it	eq
 8006038:	f8c8 1000 	streq.w	r1, [r8]
 800603c:	5162      	str	r2, [r4, r5]
 800603e:	604b      	str	r3, [r1, #4]
 8006040:	4630      	mov	r0, r6
 8006042:	f000 f82f 	bl	80060a4 <__malloc_unlock>
 8006046:	f104 000b 	add.w	r0, r4, #11
 800604a:	1d23      	adds	r3, r4, #4
 800604c:	f020 0007 	bic.w	r0, r0, #7
 8006050:	1ac2      	subs	r2, r0, r3
 8006052:	bf1c      	itt	ne
 8006054:	1a1b      	subne	r3, r3, r0
 8006056:	50a3      	strne	r3, [r4, r2]
 8006058:	e7af      	b.n	8005fba <_malloc_r+0x22>
 800605a:	6862      	ldr	r2, [r4, #4]
 800605c:	42a3      	cmp	r3, r4
 800605e:	bf0c      	ite	eq
 8006060:	f8c8 2000 	streq.w	r2, [r8]
 8006064:	605a      	strne	r2, [r3, #4]
 8006066:	e7eb      	b.n	8006040 <_malloc_r+0xa8>
 8006068:	4623      	mov	r3, r4
 800606a:	6864      	ldr	r4, [r4, #4]
 800606c:	e7ae      	b.n	8005fcc <_malloc_r+0x34>
 800606e:	463c      	mov	r4, r7
 8006070:	687f      	ldr	r7, [r7, #4]
 8006072:	e7b6      	b.n	8005fe2 <_malloc_r+0x4a>
 8006074:	461a      	mov	r2, r3
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	42a3      	cmp	r3, r4
 800607a:	d1fb      	bne.n	8006074 <_malloc_r+0xdc>
 800607c:	2300      	movs	r3, #0
 800607e:	6053      	str	r3, [r2, #4]
 8006080:	e7de      	b.n	8006040 <_malloc_r+0xa8>
 8006082:	230c      	movs	r3, #12
 8006084:	6033      	str	r3, [r6, #0]
 8006086:	4630      	mov	r0, r6
 8006088:	f000 f80c 	bl	80060a4 <__malloc_unlock>
 800608c:	e794      	b.n	8005fb8 <_malloc_r+0x20>
 800608e:	6005      	str	r5, [r0, #0]
 8006090:	e7d6      	b.n	8006040 <_malloc_r+0xa8>
 8006092:	bf00      	nop
 8006094:	20000a34 	.word	0x20000a34

08006098 <__malloc_lock>:
 8006098:	4801      	ldr	r0, [pc, #4]	@ (80060a0 <__malloc_lock+0x8>)
 800609a:	f7ff bf0f 	b.w	8005ebc <__retarget_lock_acquire_recursive>
 800609e:	bf00      	nop
 80060a0:	20000a2c 	.word	0x20000a2c

080060a4 <__malloc_unlock>:
 80060a4:	4801      	ldr	r0, [pc, #4]	@ (80060ac <__malloc_unlock+0x8>)
 80060a6:	f7ff bf0a 	b.w	8005ebe <__retarget_lock_release_recursive>
 80060aa:	bf00      	nop
 80060ac:	20000a2c 	.word	0x20000a2c

080060b0 <__ssputs_r>:
 80060b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b4:	688e      	ldr	r6, [r1, #8]
 80060b6:	461f      	mov	r7, r3
 80060b8:	42be      	cmp	r6, r7
 80060ba:	680b      	ldr	r3, [r1, #0]
 80060bc:	4682      	mov	sl, r0
 80060be:	460c      	mov	r4, r1
 80060c0:	4690      	mov	r8, r2
 80060c2:	d82d      	bhi.n	8006120 <__ssputs_r+0x70>
 80060c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80060cc:	d026      	beq.n	800611c <__ssputs_r+0x6c>
 80060ce:	6965      	ldr	r5, [r4, #20]
 80060d0:	6909      	ldr	r1, [r1, #16]
 80060d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060d6:	eba3 0901 	sub.w	r9, r3, r1
 80060da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060de:	1c7b      	adds	r3, r7, #1
 80060e0:	444b      	add	r3, r9
 80060e2:	106d      	asrs	r5, r5, #1
 80060e4:	429d      	cmp	r5, r3
 80060e6:	bf38      	it	cc
 80060e8:	461d      	movcc	r5, r3
 80060ea:	0553      	lsls	r3, r2, #21
 80060ec:	d527      	bpl.n	800613e <__ssputs_r+0x8e>
 80060ee:	4629      	mov	r1, r5
 80060f0:	f7ff ff52 	bl	8005f98 <_malloc_r>
 80060f4:	4606      	mov	r6, r0
 80060f6:	b360      	cbz	r0, 8006152 <__ssputs_r+0xa2>
 80060f8:	6921      	ldr	r1, [r4, #16]
 80060fa:	464a      	mov	r2, r9
 80060fc:	f000 fae8 	bl	80066d0 <memcpy>
 8006100:	89a3      	ldrh	r3, [r4, #12]
 8006102:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800610a:	81a3      	strh	r3, [r4, #12]
 800610c:	6126      	str	r6, [r4, #16]
 800610e:	6165      	str	r5, [r4, #20]
 8006110:	444e      	add	r6, r9
 8006112:	eba5 0509 	sub.w	r5, r5, r9
 8006116:	6026      	str	r6, [r4, #0]
 8006118:	60a5      	str	r5, [r4, #8]
 800611a:	463e      	mov	r6, r7
 800611c:	42be      	cmp	r6, r7
 800611e:	d900      	bls.n	8006122 <__ssputs_r+0x72>
 8006120:	463e      	mov	r6, r7
 8006122:	6820      	ldr	r0, [r4, #0]
 8006124:	4632      	mov	r2, r6
 8006126:	4641      	mov	r1, r8
 8006128:	f000 faa8 	bl	800667c <memmove>
 800612c:	68a3      	ldr	r3, [r4, #8]
 800612e:	1b9b      	subs	r3, r3, r6
 8006130:	60a3      	str	r3, [r4, #8]
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	4433      	add	r3, r6
 8006136:	6023      	str	r3, [r4, #0]
 8006138:	2000      	movs	r0, #0
 800613a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800613e:	462a      	mov	r2, r5
 8006140:	f000 fad4 	bl	80066ec <_realloc_r>
 8006144:	4606      	mov	r6, r0
 8006146:	2800      	cmp	r0, #0
 8006148:	d1e0      	bne.n	800610c <__ssputs_r+0x5c>
 800614a:	6921      	ldr	r1, [r4, #16]
 800614c:	4650      	mov	r0, sl
 800614e:	f7ff feb7 	bl	8005ec0 <_free_r>
 8006152:	230c      	movs	r3, #12
 8006154:	f8ca 3000 	str.w	r3, [sl]
 8006158:	89a3      	ldrh	r3, [r4, #12]
 800615a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800615e:	81a3      	strh	r3, [r4, #12]
 8006160:	f04f 30ff 	mov.w	r0, #4294967295
 8006164:	e7e9      	b.n	800613a <__ssputs_r+0x8a>
	...

08006168 <_svfiprintf_r>:
 8006168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800616c:	4698      	mov	r8, r3
 800616e:	898b      	ldrh	r3, [r1, #12]
 8006170:	061b      	lsls	r3, r3, #24
 8006172:	b09d      	sub	sp, #116	@ 0x74
 8006174:	4607      	mov	r7, r0
 8006176:	460d      	mov	r5, r1
 8006178:	4614      	mov	r4, r2
 800617a:	d510      	bpl.n	800619e <_svfiprintf_r+0x36>
 800617c:	690b      	ldr	r3, [r1, #16]
 800617e:	b973      	cbnz	r3, 800619e <_svfiprintf_r+0x36>
 8006180:	2140      	movs	r1, #64	@ 0x40
 8006182:	f7ff ff09 	bl	8005f98 <_malloc_r>
 8006186:	6028      	str	r0, [r5, #0]
 8006188:	6128      	str	r0, [r5, #16]
 800618a:	b930      	cbnz	r0, 800619a <_svfiprintf_r+0x32>
 800618c:	230c      	movs	r3, #12
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	f04f 30ff 	mov.w	r0, #4294967295
 8006194:	b01d      	add	sp, #116	@ 0x74
 8006196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800619a:	2340      	movs	r3, #64	@ 0x40
 800619c:	616b      	str	r3, [r5, #20]
 800619e:	2300      	movs	r3, #0
 80061a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80061a2:	2320      	movs	r3, #32
 80061a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80061ac:	2330      	movs	r3, #48	@ 0x30
 80061ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800634c <_svfiprintf_r+0x1e4>
 80061b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061b6:	f04f 0901 	mov.w	r9, #1
 80061ba:	4623      	mov	r3, r4
 80061bc:	469a      	mov	sl, r3
 80061be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061c2:	b10a      	cbz	r2, 80061c8 <_svfiprintf_r+0x60>
 80061c4:	2a25      	cmp	r2, #37	@ 0x25
 80061c6:	d1f9      	bne.n	80061bc <_svfiprintf_r+0x54>
 80061c8:	ebba 0b04 	subs.w	fp, sl, r4
 80061cc:	d00b      	beq.n	80061e6 <_svfiprintf_r+0x7e>
 80061ce:	465b      	mov	r3, fp
 80061d0:	4622      	mov	r2, r4
 80061d2:	4629      	mov	r1, r5
 80061d4:	4638      	mov	r0, r7
 80061d6:	f7ff ff6b 	bl	80060b0 <__ssputs_r>
 80061da:	3001      	adds	r0, #1
 80061dc:	f000 80a7 	beq.w	800632e <_svfiprintf_r+0x1c6>
 80061e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061e2:	445a      	add	r2, fp
 80061e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80061e6:	f89a 3000 	ldrb.w	r3, [sl]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 809f 	beq.w	800632e <_svfiprintf_r+0x1c6>
 80061f0:	2300      	movs	r3, #0
 80061f2:	f04f 32ff 	mov.w	r2, #4294967295
 80061f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061fa:	f10a 0a01 	add.w	sl, sl, #1
 80061fe:	9304      	str	r3, [sp, #16]
 8006200:	9307      	str	r3, [sp, #28]
 8006202:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006206:	931a      	str	r3, [sp, #104]	@ 0x68
 8006208:	4654      	mov	r4, sl
 800620a:	2205      	movs	r2, #5
 800620c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006210:	484e      	ldr	r0, [pc, #312]	@ (800634c <_svfiprintf_r+0x1e4>)
 8006212:	f7f9 ffdd 	bl	80001d0 <memchr>
 8006216:	9a04      	ldr	r2, [sp, #16]
 8006218:	b9d8      	cbnz	r0, 8006252 <_svfiprintf_r+0xea>
 800621a:	06d0      	lsls	r0, r2, #27
 800621c:	bf44      	itt	mi
 800621e:	2320      	movmi	r3, #32
 8006220:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006224:	0711      	lsls	r1, r2, #28
 8006226:	bf44      	itt	mi
 8006228:	232b      	movmi	r3, #43	@ 0x2b
 800622a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800622e:	f89a 3000 	ldrb.w	r3, [sl]
 8006232:	2b2a      	cmp	r3, #42	@ 0x2a
 8006234:	d015      	beq.n	8006262 <_svfiprintf_r+0xfa>
 8006236:	9a07      	ldr	r2, [sp, #28]
 8006238:	4654      	mov	r4, sl
 800623a:	2000      	movs	r0, #0
 800623c:	f04f 0c0a 	mov.w	ip, #10
 8006240:	4621      	mov	r1, r4
 8006242:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006246:	3b30      	subs	r3, #48	@ 0x30
 8006248:	2b09      	cmp	r3, #9
 800624a:	d94b      	bls.n	80062e4 <_svfiprintf_r+0x17c>
 800624c:	b1b0      	cbz	r0, 800627c <_svfiprintf_r+0x114>
 800624e:	9207      	str	r2, [sp, #28]
 8006250:	e014      	b.n	800627c <_svfiprintf_r+0x114>
 8006252:	eba0 0308 	sub.w	r3, r0, r8
 8006256:	fa09 f303 	lsl.w	r3, r9, r3
 800625a:	4313      	orrs	r3, r2
 800625c:	9304      	str	r3, [sp, #16]
 800625e:	46a2      	mov	sl, r4
 8006260:	e7d2      	b.n	8006208 <_svfiprintf_r+0xa0>
 8006262:	9b03      	ldr	r3, [sp, #12]
 8006264:	1d19      	adds	r1, r3, #4
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	9103      	str	r1, [sp, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	bfbb      	ittet	lt
 800626e:	425b      	neglt	r3, r3
 8006270:	f042 0202 	orrlt.w	r2, r2, #2
 8006274:	9307      	strge	r3, [sp, #28]
 8006276:	9307      	strlt	r3, [sp, #28]
 8006278:	bfb8      	it	lt
 800627a:	9204      	strlt	r2, [sp, #16]
 800627c:	7823      	ldrb	r3, [r4, #0]
 800627e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006280:	d10a      	bne.n	8006298 <_svfiprintf_r+0x130>
 8006282:	7863      	ldrb	r3, [r4, #1]
 8006284:	2b2a      	cmp	r3, #42	@ 0x2a
 8006286:	d132      	bne.n	80062ee <_svfiprintf_r+0x186>
 8006288:	9b03      	ldr	r3, [sp, #12]
 800628a:	1d1a      	adds	r2, r3, #4
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	9203      	str	r2, [sp, #12]
 8006290:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006294:	3402      	adds	r4, #2
 8006296:	9305      	str	r3, [sp, #20]
 8006298:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800635c <_svfiprintf_r+0x1f4>
 800629c:	7821      	ldrb	r1, [r4, #0]
 800629e:	2203      	movs	r2, #3
 80062a0:	4650      	mov	r0, sl
 80062a2:	f7f9 ff95 	bl	80001d0 <memchr>
 80062a6:	b138      	cbz	r0, 80062b8 <_svfiprintf_r+0x150>
 80062a8:	9b04      	ldr	r3, [sp, #16]
 80062aa:	eba0 000a 	sub.w	r0, r0, sl
 80062ae:	2240      	movs	r2, #64	@ 0x40
 80062b0:	4082      	lsls	r2, r0
 80062b2:	4313      	orrs	r3, r2
 80062b4:	3401      	adds	r4, #1
 80062b6:	9304      	str	r3, [sp, #16]
 80062b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062bc:	4824      	ldr	r0, [pc, #144]	@ (8006350 <_svfiprintf_r+0x1e8>)
 80062be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062c2:	2206      	movs	r2, #6
 80062c4:	f7f9 ff84 	bl	80001d0 <memchr>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	d036      	beq.n	800633a <_svfiprintf_r+0x1d2>
 80062cc:	4b21      	ldr	r3, [pc, #132]	@ (8006354 <_svfiprintf_r+0x1ec>)
 80062ce:	bb1b      	cbnz	r3, 8006318 <_svfiprintf_r+0x1b0>
 80062d0:	9b03      	ldr	r3, [sp, #12]
 80062d2:	3307      	adds	r3, #7
 80062d4:	f023 0307 	bic.w	r3, r3, #7
 80062d8:	3308      	adds	r3, #8
 80062da:	9303      	str	r3, [sp, #12]
 80062dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062de:	4433      	add	r3, r6
 80062e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80062e2:	e76a      	b.n	80061ba <_svfiprintf_r+0x52>
 80062e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80062e8:	460c      	mov	r4, r1
 80062ea:	2001      	movs	r0, #1
 80062ec:	e7a8      	b.n	8006240 <_svfiprintf_r+0xd8>
 80062ee:	2300      	movs	r3, #0
 80062f0:	3401      	adds	r4, #1
 80062f2:	9305      	str	r3, [sp, #20]
 80062f4:	4619      	mov	r1, r3
 80062f6:	f04f 0c0a 	mov.w	ip, #10
 80062fa:	4620      	mov	r0, r4
 80062fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006300:	3a30      	subs	r2, #48	@ 0x30
 8006302:	2a09      	cmp	r2, #9
 8006304:	d903      	bls.n	800630e <_svfiprintf_r+0x1a6>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0c6      	beq.n	8006298 <_svfiprintf_r+0x130>
 800630a:	9105      	str	r1, [sp, #20]
 800630c:	e7c4      	b.n	8006298 <_svfiprintf_r+0x130>
 800630e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006312:	4604      	mov	r4, r0
 8006314:	2301      	movs	r3, #1
 8006316:	e7f0      	b.n	80062fa <_svfiprintf_r+0x192>
 8006318:	ab03      	add	r3, sp, #12
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	462a      	mov	r2, r5
 800631e:	4b0e      	ldr	r3, [pc, #56]	@ (8006358 <_svfiprintf_r+0x1f0>)
 8006320:	a904      	add	r1, sp, #16
 8006322:	4638      	mov	r0, r7
 8006324:	f3af 8000 	nop.w
 8006328:	1c42      	adds	r2, r0, #1
 800632a:	4606      	mov	r6, r0
 800632c:	d1d6      	bne.n	80062dc <_svfiprintf_r+0x174>
 800632e:	89ab      	ldrh	r3, [r5, #12]
 8006330:	065b      	lsls	r3, r3, #25
 8006332:	f53f af2d 	bmi.w	8006190 <_svfiprintf_r+0x28>
 8006336:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006338:	e72c      	b.n	8006194 <_svfiprintf_r+0x2c>
 800633a:	ab03      	add	r3, sp, #12
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	462a      	mov	r2, r5
 8006340:	4b05      	ldr	r3, [pc, #20]	@ (8006358 <_svfiprintf_r+0x1f0>)
 8006342:	a904      	add	r1, sp, #16
 8006344:	4638      	mov	r0, r7
 8006346:	f000 f879 	bl	800643c <_printf_i>
 800634a:	e7ed      	b.n	8006328 <_svfiprintf_r+0x1c0>
 800634c:	08006f50 	.word	0x08006f50
 8006350:	08006f5a 	.word	0x08006f5a
 8006354:	00000000 	.word	0x00000000
 8006358:	080060b1 	.word	0x080060b1
 800635c:	08006f56 	.word	0x08006f56

08006360 <_printf_common>:
 8006360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006364:	4616      	mov	r6, r2
 8006366:	4698      	mov	r8, r3
 8006368:	688a      	ldr	r2, [r1, #8]
 800636a:	690b      	ldr	r3, [r1, #16]
 800636c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006370:	4293      	cmp	r3, r2
 8006372:	bfb8      	it	lt
 8006374:	4613      	movlt	r3, r2
 8006376:	6033      	str	r3, [r6, #0]
 8006378:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800637c:	4607      	mov	r7, r0
 800637e:	460c      	mov	r4, r1
 8006380:	b10a      	cbz	r2, 8006386 <_printf_common+0x26>
 8006382:	3301      	adds	r3, #1
 8006384:	6033      	str	r3, [r6, #0]
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	0699      	lsls	r1, r3, #26
 800638a:	bf42      	ittt	mi
 800638c:	6833      	ldrmi	r3, [r6, #0]
 800638e:	3302      	addmi	r3, #2
 8006390:	6033      	strmi	r3, [r6, #0]
 8006392:	6825      	ldr	r5, [r4, #0]
 8006394:	f015 0506 	ands.w	r5, r5, #6
 8006398:	d106      	bne.n	80063a8 <_printf_common+0x48>
 800639a:	f104 0a19 	add.w	sl, r4, #25
 800639e:	68e3      	ldr	r3, [r4, #12]
 80063a0:	6832      	ldr	r2, [r6, #0]
 80063a2:	1a9b      	subs	r3, r3, r2
 80063a4:	42ab      	cmp	r3, r5
 80063a6:	dc26      	bgt.n	80063f6 <_printf_common+0x96>
 80063a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063ac:	6822      	ldr	r2, [r4, #0]
 80063ae:	3b00      	subs	r3, #0
 80063b0:	bf18      	it	ne
 80063b2:	2301      	movne	r3, #1
 80063b4:	0692      	lsls	r2, r2, #26
 80063b6:	d42b      	bmi.n	8006410 <_printf_common+0xb0>
 80063b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063bc:	4641      	mov	r1, r8
 80063be:	4638      	mov	r0, r7
 80063c0:	47c8      	blx	r9
 80063c2:	3001      	adds	r0, #1
 80063c4:	d01e      	beq.n	8006404 <_printf_common+0xa4>
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	6922      	ldr	r2, [r4, #16]
 80063ca:	f003 0306 	and.w	r3, r3, #6
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	bf02      	ittt	eq
 80063d2:	68e5      	ldreq	r5, [r4, #12]
 80063d4:	6833      	ldreq	r3, [r6, #0]
 80063d6:	1aed      	subeq	r5, r5, r3
 80063d8:	68a3      	ldr	r3, [r4, #8]
 80063da:	bf0c      	ite	eq
 80063dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063e0:	2500      	movne	r5, #0
 80063e2:	4293      	cmp	r3, r2
 80063e4:	bfc4      	itt	gt
 80063e6:	1a9b      	subgt	r3, r3, r2
 80063e8:	18ed      	addgt	r5, r5, r3
 80063ea:	2600      	movs	r6, #0
 80063ec:	341a      	adds	r4, #26
 80063ee:	42b5      	cmp	r5, r6
 80063f0:	d11a      	bne.n	8006428 <_printf_common+0xc8>
 80063f2:	2000      	movs	r0, #0
 80063f4:	e008      	b.n	8006408 <_printf_common+0xa8>
 80063f6:	2301      	movs	r3, #1
 80063f8:	4652      	mov	r2, sl
 80063fa:	4641      	mov	r1, r8
 80063fc:	4638      	mov	r0, r7
 80063fe:	47c8      	blx	r9
 8006400:	3001      	adds	r0, #1
 8006402:	d103      	bne.n	800640c <_printf_common+0xac>
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640c:	3501      	adds	r5, #1
 800640e:	e7c6      	b.n	800639e <_printf_common+0x3e>
 8006410:	18e1      	adds	r1, r4, r3
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	2030      	movs	r0, #48	@ 0x30
 8006416:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800641a:	4422      	add	r2, r4
 800641c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006420:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006424:	3302      	adds	r3, #2
 8006426:	e7c7      	b.n	80063b8 <_printf_common+0x58>
 8006428:	2301      	movs	r3, #1
 800642a:	4622      	mov	r2, r4
 800642c:	4641      	mov	r1, r8
 800642e:	4638      	mov	r0, r7
 8006430:	47c8      	blx	r9
 8006432:	3001      	adds	r0, #1
 8006434:	d0e6      	beq.n	8006404 <_printf_common+0xa4>
 8006436:	3601      	adds	r6, #1
 8006438:	e7d9      	b.n	80063ee <_printf_common+0x8e>
	...

0800643c <_printf_i>:
 800643c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006440:	7e0f      	ldrb	r7, [r1, #24]
 8006442:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006444:	2f78      	cmp	r7, #120	@ 0x78
 8006446:	4691      	mov	r9, r2
 8006448:	4680      	mov	r8, r0
 800644a:	460c      	mov	r4, r1
 800644c:	469a      	mov	sl, r3
 800644e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006452:	d807      	bhi.n	8006464 <_printf_i+0x28>
 8006454:	2f62      	cmp	r7, #98	@ 0x62
 8006456:	d80a      	bhi.n	800646e <_printf_i+0x32>
 8006458:	2f00      	cmp	r7, #0
 800645a:	f000 80d2 	beq.w	8006602 <_printf_i+0x1c6>
 800645e:	2f58      	cmp	r7, #88	@ 0x58
 8006460:	f000 80b9 	beq.w	80065d6 <_printf_i+0x19a>
 8006464:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006468:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800646c:	e03a      	b.n	80064e4 <_printf_i+0xa8>
 800646e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006472:	2b15      	cmp	r3, #21
 8006474:	d8f6      	bhi.n	8006464 <_printf_i+0x28>
 8006476:	a101      	add	r1, pc, #4	@ (adr r1, 800647c <_printf_i+0x40>)
 8006478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800647c:	080064d5 	.word	0x080064d5
 8006480:	080064e9 	.word	0x080064e9
 8006484:	08006465 	.word	0x08006465
 8006488:	08006465 	.word	0x08006465
 800648c:	08006465 	.word	0x08006465
 8006490:	08006465 	.word	0x08006465
 8006494:	080064e9 	.word	0x080064e9
 8006498:	08006465 	.word	0x08006465
 800649c:	08006465 	.word	0x08006465
 80064a0:	08006465 	.word	0x08006465
 80064a4:	08006465 	.word	0x08006465
 80064a8:	080065e9 	.word	0x080065e9
 80064ac:	08006513 	.word	0x08006513
 80064b0:	080065a3 	.word	0x080065a3
 80064b4:	08006465 	.word	0x08006465
 80064b8:	08006465 	.word	0x08006465
 80064bc:	0800660b 	.word	0x0800660b
 80064c0:	08006465 	.word	0x08006465
 80064c4:	08006513 	.word	0x08006513
 80064c8:	08006465 	.word	0x08006465
 80064cc:	08006465 	.word	0x08006465
 80064d0:	080065ab 	.word	0x080065ab
 80064d4:	6833      	ldr	r3, [r6, #0]
 80064d6:	1d1a      	adds	r2, r3, #4
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6032      	str	r2, [r6, #0]
 80064dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80064e4:	2301      	movs	r3, #1
 80064e6:	e09d      	b.n	8006624 <_printf_i+0x1e8>
 80064e8:	6833      	ldr	r3, [r6, #0]
 80064ea:	6820      	ldr	r0, [r4, #0]
 80064ec:	1d19      	adds	r1, r3, #4
 80064ee:	6031      	str	r1, [r6, #0]
 80064f0:	0606      	lsls	r6, r0, #24
 80064f2:	d501      	bpl.n	80064f8 <_printf_i+0xbc>
 80064f4:	681d      	ldr	r5, [r3, #0]
 80064f6:	e003      	b.n	8006500 <_printf_i+0xc4>
 80064f8:	0645      	lsls	r5, r0, #25
 80064fa:	d5fb      	bpl.n	80064f4 <_printf_i+0xb8>
 80064fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006500:	2d00      	cmp	r5, #0
 8006502:	da03      	bge.n	800650c <_printf_i+0xd0>
 8006504:	232d      	movs	r3, #45	@ 0x2d
 8006506:	426d      	negs	r5, r5
 8006508:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800650c:	4859      	ldr	r0, [pc, #356]	@ (8006674 <_printf_i+0x238>)
 800650e:	230a      	movs	r3, #10
 8006510:	e011      	b.n	8006536 <_printf_i+0xfa>
 8006512:	6821      	ldr	r1, [r4, #0]
 8006514:	6833      	ldr	r3, [r6, #0]
 8006516:	0608      	lsls	r0, r1, #24
 8006518:	f853 5b04 	ldr.w	r5, [r3], #4
 800651c:	d402      	bmi.n	8006524 <_printf_i+0xe8>
 800651e:	0649      	lsls	r1, r1, #25
 8006520:	bf48      	it	mi
 8006522:	b2ad      	uxthmi	r5, r5
 8006524:	2f6f      	cmp	r7, #111	@ 0x6f
 8006526:	4853      	ldr	r0, [pc, #332]	@ (8006674 <_printf_i+0x238>)
 8006528:	6033      	str	r3, [r6, #0]
 800652a:	bf14      	ite	ne
 800652c:	230a      	movne	r3, #10
 800652e:	2308      	moveq	r3, #8
 8006530:	2100      	movs	r1, #0
 8006532:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006536:	6866      	ldr	r6, [r4, #4]
 8006538:	60a6      	str	r6, [r4, #8]
 800653a:	2e00      	cmp	r6, #0
 800653c:	bfa2      	ittt	ge
 800653e:	6821      	ldrge	r1, [r4, #0]
 8006540:	f021 0104 	bicge.w	r1, r1, #4
 8006544:	6021      	strge	r1, [r4, #0]
 8006546:	b90d      	cbnz	r5, 800654c <_printf_i+0x110>
 8006548:	2e00      	cmp	r6, #0
 800654a:	d04b      	beq.n	80065e4 <_printf_i+0x1a8>
 800654c:	4616      	mov	r6, r2
 800654e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006552:	fb03 5711 	mls	r7, r3, r1, r5
 8006556:	5dc7      	ldrb	r7, [r0, r7]
 8006558:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800655c:	462f      	mov	r7, r5
 800655e:	42bb      	cmp	r3, r7
 8006560:	460d      	mov	r5, r1
 8006562:	d9f4      	bls.n	800654e <_printf_i+0x112>
 8006564:	2b08      	cmp	r3, #8
 8006566:	d10b      	bne.n	8006580 <_printf_i+0x144>
 8006568:	6823      	ldr	r3, [r4, #0]
 800656a:	07df      	lsls	r7, r3, #31
 800656c:	d508      	bpl.n	8006580 <_printf_i+0x144>
 800656e:	6923      	ldr	r3, [r4, #16]
 8006570:	6861      	ldr	r1, [r4, #4]
 8006572:	4299      	cmp	r1, r3
 8006574:	bfde      	ittt	le
 8006576:	2330      	movle	r3, #48	@ 0x30
 8006578:	f806 3c01 	strble.w	r3, [r6, #-1]
 800657c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006580:	1b92      	subs	r2, r2, r6
 8006582:	6122      	str	r2, [r4, #16]
 8006584:	f8cd a000 	str.w	sl, [sp]
 8006588:	464b      	mov	r3, r9
 800658a:	aa03      	add	r2, sp, #12
 800658c:	4621      	mov	r1, r4
 800658e:	4640      	mov	r0, r8
 8006590:	f7ff fee6 	bl	8006360 <_printf_common>
 8006594:	3001      	adds	r0, #1
 8006596:	d14a      	bne.n	800662e <_printf_i+0x1f2>
 8006598:	f04f 30ff 	mov.w	r0, #4294967295
 800659c:	b004      	add	sp, #16
 800659e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	f043 0320 	orr.w	r3, r3, #32
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	4833      	ldr	r0, [pc, #204]	@ (8006678 <_printf_i+0x23c>)
 80065ac:	2778      	movs	r7, #120	@ 0x78
 80065ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	6831      	ldr	r1, [r6, #0]
 80065b6:	061f      	lsls	r7, r3, #24
 80065b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80065bc:	d402      	bmi.n	80065c4 <_printf_i+0x188>
 80065be:	065f      	lsls	r7, r3, #25
 80065c0:	bf48      	it	mi
 80065c2:	b2ad      	uxthmi	r5, r5
 80065c4:	6031      	str	r1, [r6, #0]
 80065c6:	07d9      	lsls	r1, r3, #31
 80065c8:	bf44      	itt	mi
 80065ca:	f043 0320 	orrmi.w	r3, r3, #32
 80065ce:	6023      	strmi	r3, [r4, #0]
 80065d0:	b11d      	cbz	r5, 80065da <_printf_i+0x19e>
 80065d2:	2310      	movs	r3, #16
 80065d4:	e7ac      	b.n	8006530 <_printf_i+0xf4>
 80065d6:	4827      	ldr	r0, [pc, #156]	@ (8006674 <_printf_i+0x238>)
 80065d8:	e7e9      	b.n	80065ae <_printf_i+0x172>
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	f023 0320 	bic.w	r3, r3, #32
 80065e0:	6023      	str	r3, [r4, #0]
 80065e2:	e7f6      	b.n	80065d2 <_printf_i+0x196>
 80065e4:	4616      	mov	r6, r2
 80065e6:	e7bd      	b.n	8006564 <_printf_i+0x128>
 80065e8:	6833      	ldr	r3, [r6, #0]
 80065ea:	6825      	ldr	r5, [r4, #0]
 80065ec:	6961      	ldr	r1, [r4, #20]
 80065ee:	1d18      	adds	r0, r3, #4
 80065f0:	6030      	str	r0, [r6, #0]
 80065f2:	062e      	lsls	r6, r5, #24
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	d501      	bpl.n	80065fc <_printf_i+0x1c0>
 80065f8:	6019      	str	r1, [r3, #0]
 80065fa:	e002      	b.n	8006602 <_printf_i+0x1c6>
 80065fc:	0668      	lsls	r0, r5, #25
 80065fe:	d5fb      	bpl.n	80065f8 <_printf_i+0x1bc>
 8006600:	8019      	strh	r1, [r3, #0]
 8006602:	2300      	movs	r3, #0
 8006604:	6123      	str	r3, [r4, #16]
 8006606:	4616      	mov	r6, r2
 8006608:	e7bc      	b.n	8006584 <_printf_i+0x148>
 800660a:	6833      	ldr	r3, [r6, #0]
 800660c:	1d1a      	adds	r2, r3, #4
 800660e:	6032      	str	r2, [r6, #0]
 8006610:	681e      	ldr	r6, [r3, #0]
 8006612:	6862      	ldr	r2, [r4, #4]
 8006614:	2100      	movs	r1, #0
 8006616:	4630      	mov	r0, r6
 8006618:	f7f9 fdda 	bl	80001d0 <memchr>
 800661c:	b108      	cbz	r0, 8006622 <_printf_i+0x1e6>
 800661e:	1b80      	subs	r0, r0, r6
 8006620:	6060      	str	r0, [r4, #4]
 8006622:	6863      	ldr	r3, [r4, #4]
 8006624:	6123      	str	r3, [r4, #16]
 8006626:	2300      	movs	r3, #0
 8006628:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800662c:	e7aa      	b.n	8006584 <_printf_i+0x148>
 800662e:	6923      	ldr	r3, [r4, #16]
 8006630:	4632      	mov	r2, r6
 8006632:	4649      	mov	r1, r9
 8006634:	4640      	mov	r0, r8
 8006636:	47d0      	blx	sl
 8006638:	3001      	adds	r0, #1
 800663a:	d0ad      	beq.n	8006598 <_printf_i+0x15c>
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	079b      	lsls	r3, r3, #30
 8006640:	d413      	bmi.n	800666a <_printf_i+0x22e>
 8006642:	68e0      	ldr	r0, [r4, #12]
 8006644:	9b03      	ldr	r3, [sp, #12]
 8006646:	4298      	cmp	r0, r3
 8006648:	bfb8      	it	lt
 800664a:	4618      	movlt	r0, r3
 800664c:	e7a6      	b.n	800659c <_printf_i+0x160>
 800664e:	2301      	movs	r3, #1
 8006650:	4632      	mov	r2, r6
 8006652:	4649      	mov	r1, r9
 8006654:	4640      	mov	r0, r8
 8006656:	47d0      	blx	sl
 8006658:	3001      	adds	r0, #1
 800665a:	d09d      	beq.n	8006598 <_printf_i+0x15c>
 800665c:	3501      	adds	r5, #1
 800665e:	68e3      	ldr	r3, [r4, #12]
 8006660:	9903      	ldr	r1, [sp, #12]
 8006662:	1a5b      	subs	r3, r3, r1
 8006664:	42ab      	cmp	r3, r5
 8006666:	dcf2      	bgt.n	800664e <_printf_i+0x212>
 8006668:	e7eb      	b.n	8006642 <_printf_i+0x206>
 800666a:	2500      	movs	r5, #0
 800666c:	f104 0619 	add.w	r6, r4, #25
 8006670:	e7f5      	b.n	800665e <_printf_i+0x222>
 8006672:	bf00      	nop
 8006674:	08006f61 	.word	0x08006f61
 8006678:	08006f72 	.word	0x08006f72

0800667c <memmove>:
 800667c:	4288      	cmp	r0, r1
 800667e:	b510      	push	{r4, lr}
 8006680:	eb01 0402 	add.w	r4, r1, r2
 8006684:	d902      	bls.n	800668c <memmove+0x10>
 8006686:	4284      	cmp	r4, r0
 8006688:	4623      	mov	r3, r4
 800668a:	d807      	bhi.n	800669c <memmove+0x20>
 800668c:	1e43      	subs	r3, r0, #1
 800668e:	42a1      	cmp	r1, r4
 8006690:	d008      	beq.n	80066a4 <memmove+0x28>
 8006692:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006696:	f803 2f01 	strb.w	r2, [r3, #1]!
 800669a:	e7f8      	b.n	800668e <memmove+0x12>
 800669c:	4402      	add	r2, r0
 800669e:	4601      	mov	r1, r0
 80066a0:	428a      	cmp	r2, r1
 80066a2:	d100      	bne.n	80066a6 <memmove+0x2a>
 80066a4:	bd10      	pop	{r4, pc}
 80066a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066ae:	e7f7      	b.n	80066a0 <memmove+0x24>

080066b0 <_sbrk_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	4d06      	ldr	r5, [pc, #24]	@ (80066cc <_sbrk_r+0x1c>)
 80066b4:	2300      	movs	r3, #0
 80066b6:	4604      	mov	r4, r0
 80066b8:	4608      	mov	r0, r1
 80066ba:	602b      	str	r3, [r5, #0]
 80066bc:	f7fa ff82 	bl	80015c4 <_sbrk>
 80066c0:	1c43      	adds	r3, r0, #1
 80066c2:	d102      	bne.n	80066ca <_sbrk_r+0x1a>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	b103      	cbz	r3, 80066ca <_sbrk_r+0x1a>
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	bd38      	pop	{r3, r4, r5, pc}
 80066cc:	20000a28 	.word	0x20000a28

080066d0 <memcpy>:
 80066d0:	440a      	add	r2, r1
 80066d2:	4291      	cmp	r1, r2
 80066d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80066d8:	d100      	bne.n	80066dc <memcpy+0xc>
 80066da:	4770      	bx	lr
 80066dc:	b510      	push	{r4, lr}
 80066de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066e6:	4291      	cmp	r1, r2
 80066e8:	d1f9      	bne.n	80066de <memcpy+0xe>
 80066ea:	bd10      	pop	{r4, pc}

080066ec <_realloc_r>:
 80066ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f0:	4680      	mov	r8, r0
 80066f2:	4615      	mov	r5, r2
 80066f4:	460c      	mov	r4, r1
 80066f6:	b921      	cbnz	r1, 8006702 <_realloc_r+0x16>
 80066f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066fc:	4611      	mov	r1, r2
 80066fe:	f7ff bc4b 	b.w	8005f98 <_malloc_r>
 8006702:	b92a      	cbnz	r2, 8006710 <_realloc_r+0x24>
 8006704:	f7ff fbdc 	bl	8005ec0 <_free_r>
 8006708:	2400      	movs	r4, #0
 800670a:	4620      	mov	r0, r4
 800670c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006710:	f000 f81a 	bl	8006748 <_malloc_usable_size_r>
 8006714:	4285      	cmp	r5, r0
 8006716:	4606      	mov	r6, r0
 8006718:	d802      	bhi.n	8006720 <_realloc_r+0x34>
 800671a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800671e:	d8f4      	bhi.n	800670a <_realloc_r+0x1e>
 8006720:	4629      	mov	r1, r5
 8006722:	4640      	mov	r0, r8
 8006724:	f7ff fc38 	bl	8005f98 <_malloc_r>
 8006728:	4607      	mov	r7, r0
 800672a:	2800      	cmp	r0, #0
 800672c:	d0ec      	beq.n	8006708 <_realloc_r+0x1c>
 800672e:	42b5      	cmp	r5, r6
 8006730:	462a      	mov	r2, r5
 8006732:	4621      	mov	r1, r4
 8006734:	bf28      	it	cs
 8006736:	4632      	movcs	r2, r6
 8006738:	f7ff ffca 	bl	80066d0 <memcpy>
 800673c:	4621      	mov	r1, r4
 800673e:	4640      	mov	r0, r8
 8006740:	f7ff fbbe 	bl	8005ec0 <_free_r>
 8006744:	463c      	mov	r4, r7
 8006746:	e7e0      	b.n	800670a <_realloc_r+0x1e>

08006748 <_malloc_usable_size_r>:
 8006748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800674c:	1f18      	subs	r0, r3, #4
 800674e:	2b00      	cmp	r3, #0
 8006750:	bfbc      	itt	lt
 8006752:	580b      	ldrlt	r3, [r1, r0]
 8006754:	18c0      	addlt	r0, r0, r3
 8006756:	4770      	bx	lr

08006758 <_init>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	bf00      	nop
 800675c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675e:	bc08      	pop	{r3}
 8006760:	469e      	mov	lr, r3
 8006762:	4770      	bx	lr

08006764 <_fini>:
 8006764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006766:	bf00      	nop
 8006768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676a:	bc08      	pop	{r3}
 800676c:	469e      	mov	lr, r3
 800676e:	4770      	bx	lr
